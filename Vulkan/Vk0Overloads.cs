using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Handles;
using Vulkan.Structs;

namespace Vulkan
{
    public static unsafe partial class Vk
    {
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, out VkCommandBuffer commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, out VkCommandBuffer commandBuffers) => vkAllocateCommandBuffers(device, ref allocateInfo, out commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, [In, Out]VkCommandBufferAllocateInfo[] allocateInfo, out VkCommandBuffer commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, [In, Out]VkCommandBufferAllocateInfo[] allocateInfo, out VkCommandBuffer commandBuffers) => vkAllocateCommandBuffers(device, allocateInfo, out commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, [In, Out]VkCommandBuffer[] commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, [In, Out]VkCommandBuffer[] commandBuffers) => vkAllocateCommandBuffers(device, ref allocateInfo, commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, [In, Out]VkCommandBufferAllocateInfo[] allocateInfo, [In, Out]VkCommandBuffer[] commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, [In, Out]VkCommandBufferAllocateInfo[] allocateInfo, [In, Out]VkCommandBuffer[] commandBuffers) => vkAllocateCommandBuffers(device, allocateInfo, commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, out VkDescriptorSet descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, out VkDescriptorSet descriptorSets) => vkAllocateDescriptorSets(device, ref allocateInfo, out descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, [In, Out]VkDescriptorSetAllocateInfo[] allocateInfo, out VkDescriptorSet descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, [In, Out]VkDescriptorSetAllocateInfo[] allocateInfo, out VkDescriptorSet descriptorSets) => vkAllocateDescriptorSets(device, allocateInfo, out descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, [In, Out]VkDescriptorSet[] descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, [In, Out]VkDescriptorSet[] descriptorSets) => vkAllocateDescriptorSets(device, ref allocateInfo, descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, [In, Out]VkDescriptorSetAllocateInfo[] allocateInfo, [In, Out]VkDescriptorSet[] descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, [In, Out]VkDescriptorSetAllocateInfo[] allocateInfo, [In, Out]VkDescriptorSet[] descriptorSets) => vkAllocateDescriptorSets(device, allocateInfo, descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => vkAllocateMemory(device, ref allocateInfo, ref allocator, out memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => vkAllocateMemory(device, allocateInfo, ref allocator, out memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDeviceMemory memory) => vkAllocateMemory(device, ref allocateInfo, allocator, out memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDeviceMemory memory) => vkAllocateMemory(device, allocateInfo, allocator, out memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDeviceMemory[] memory) => vkAllocateMemory(device, ref allocateInfo, ref allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDeviceMemory[] memory) => vkAllocateMemory(device, allocateInfo, ref allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDeviceMemory[] memory) => vkAllocateMemory(device, ref allocateInfo, allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, [In, Out]VkMemoryAllocateInfo[] allocateInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDeviceMemory[] memory) => vkAllocateMemory(device, allocateInfo, allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo);
        public static void BeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo) => vkBeginCommandBuffer(commandBuffer, ref beginInfo).AssertSuccess(nameof(vkBeginCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, [In, Out]VkCommandBufferBeginInfo[] beginInfo);
        public static void BeginCommandBuffer(VkCommandBuffer commandBuffer, [In, Out]VkCommandBufferBeginInfo[] beginInfo) => vkBeginCommandBuffer(commandBuffer, beginInfo).AssertSuccess(nameof(vkBeginCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, ref VkBindBufferMemoryInfo bindInfos);
        public static void BindBufferMemory2(VkDevice device, uint bindInfoCount, ref VkBindBufferMemoryInfo bindInfos) => vkBindBufferMemory2(device, bindInfoCount, ref bindInfos).AssertSuccess(nameof(vkBindBufferMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, [In, Out]VkBindBufferMemoryInfo[] bindInfos);
        public static void BindBufferMemory2(VkDevice device, uint bindInfoCount, [In, Out]VkBindBufferMemoryInfo[] bindInfos) => vkBindBufferMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindBufferMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, ref VkBindImageMemoryInfo bindInfos);
        public static void BindImageMemory2(VkDevice device, uint bindInfoCount, ref VkBindImageMemoryInfo bindInfos) => vkBindImageMemory2(device, bindInfoCount, ref bindInfos).AssertSuccess(nameof(vkBindImageMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, [In, Out]VkBindImageMemoryInfo[] bindInfos);
        public static void BindImageMemory2(VkDevice device, uint bindInfoCount, [In, Out]VkBindImageMemoryInfo[] bindInfos) => vkBindImageMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindImageMemory2));
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents);
        public static void CmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, ref renderPassBegin, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, VkSubpassContents contents);
        public static void CmdBeginRenderPass(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, renderPassBegin, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, ref renderPassBegin, ref subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, renderPassBegin, ref subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, ref renderPassBegin, subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkRenderPassBeginInfo[] renderPassBegin, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, renderPassBegin, subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ref descriptorSets, dynamicOffsetCount, ref dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, ref dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, [In, Out]uint[] dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, [In, Out]uint[] dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ref descriptorSets, dynamicOffsetCount, dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, [In, Out]uint[] dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, [In, Out]uint[] dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, [In, Out]VkBuffer[] buffers, ref VkDeviceSize offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, [In, Out]VkBuffer[] buffers, ref VkDeviceSize offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, buffers, ref offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, [In, Out]VkDeviceSize[] offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, [In, Out]VkDeviceSize[] offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, ref buffers, offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, [In, Out]VkBuffer[] buffers, [In, Out]VkDeviceSize[] offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, [In, Out]VkBuffer[] buffers, [In, Out]VkDeviceSize[] offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, buffers, offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit regions, VkFilter filter);
        public static void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit regions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions, filter);
        [DllImport("vulkan-1")] private static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageBlit[] regions, VkFilter filter);
        public static void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageBlit[] regions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions, filter);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, ref VkClearRect rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, ref VkClearRect rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, ref attachments, rectCount, ref rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, [In, Out]VkClearAttachment[] attachments, uint rectCount, ref VkClearRect rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, [In, Out]VkClearAttachment[] attachments, uint rectCount, ref VkClearRect rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, attachments, rectCount, ref rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, [In, Out]VkClearRect[] rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, [In, Out]VkClearRect[] rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, ref attachments, rectCount, rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, [In, Out]VkClearAttachment[] attachments, uint rectCount, [In, Out]VkClearRect[] rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, [In, Out]VkClearAttachment[] attachments, uint rectCount, [In, Out]VkClearRect[] rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, attachments, rectCount, rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, ref color, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearColorValue[] color, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearColorValue[] color, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, color, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, ref color, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearColorValue[] color, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearColorValue[] color, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, color, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearDepthStencilValue[] depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearDepthStencilValue[] depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, depthStencil, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearDepthStencilValue[] depthStencil, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, [In, Out]VkClearDepthStencilValue[] depthStencil, uint rangeCount, [In, Out]VkImageSubresourceRange[] ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy regions);
        public static void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy regions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, [In, Out]VkBufferCopy[] regions);
        public static void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, [In, Out]VkBufferCopy[] regions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy regions);
        public static void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy regions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkBufferImageCopy[] regions);
        public static void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkBufferImageCopy[] regions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy regions);
        public static void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy regions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageCopy[] regions);
        public static void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageCopy[] regions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy regions);
        public static void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy regions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, [In, Out]VkBufferImageCopy[] regions);
        public static void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, [In, Out]VkBufferImageCopy[] regions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdEndRenderPass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassEndInfo[] subpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer commandBuffers);
        public static void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer commandBuffers) => vkCmdExecuteCommands(commandBuffer, commandBufferCount, ref commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, [In, Out]VkCommandBuffer[] commandBuffers);
        public static void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, [In, Out]VkCommandBuffer[] commandBuffers) => vkCmdExecuteCommands(commandBuffer, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, ref subpassBeginInfo, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, subpassBeginInfo, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, [In, Out]VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, [In, Out]VkSubpassEndInfo[] subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, ref subpassBeginInfo, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo, [In, Out]VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, [In, Out]VkSubpassBeginInfo[] subpassBeginInfo, [In, Out]VkSubpassEndInfo[] subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, subpassBeginInfo, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, [In, Out]VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, [In, Out]VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, [In, Out]VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve regions);
        public static void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve regions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageResolve[] regions);
        public static void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, [In, Out]VkImageResolve[] regions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D scissors);
        public static void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D scissors) => vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, ref scissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, [In, Out]VkRect2D[] scissors);
        public static void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, [In, Out]VkRect2D[] scissors) => vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, scissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport viewports);
        public static void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport viewports) => vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, ref viewports);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, [In, Out]VkViewport[] viewports);
        public static void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, [In, Out]VkViewport[] viewports) => vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, viewports);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => vkCreateBuffer(device, ref createInfo, ref allocator, out buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => vkCreateBuffer(device, createInfo, ref allocator, out buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBuffer buffer) => vkCreateBuffer(device, ref createInfo, allocator, out buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBuffer buffer) => vkCreateBuffer(device, createInfo, allocator, out buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBuffer[] buffer) => vkCreateBuffer(device, ref createInfo, ref allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBuffer[] buffer) => vkCreateBuffer(device, createInfo, ref allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBuffer[] buffer) => vkCreateBuffer(device, ref createInfo, allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, [In, Out]VkBufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBuffer[] buffer) => vkCreateBuffer(device, createInfo, allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => vkCreateBufferView(device, ref createInfo, ref allocator, out view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view);
        public static void CreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => vkCreateBufferView(device, createInfo, ref allocator, out view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBufferView view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBufferView view) => vkCreateBufferView(device, ref createInfo, allocator, out view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBufferView view);
        public static void CreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkBufferView view) => vkCreateBufferView(device, createInfo, allocator, out view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBufferView[] view) => vkCreateBufferView(device, ref createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkBufferView[] view) => vkCreateBufferView(device, createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBufferView[] view) => vkCreateBufferView(device, ref createInfo, allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, [In, Out]VkBufferViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkBufferView[] view) => vkCreateBufferView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => vkCreateCommandPool(device, ref createInfo, ref allocator, out commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => vkCreateCommandPool(device, createInfo, ref allocator, out commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkCommandPool commandPool) => vkCreateCommandPool(device, ref createInfo, allocator, out commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkCommandPool commandPool) => vkCreateCommandPool(device, createInfo, allocator, out commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkCommandPool[] commandPool) => vkCreateCommandPool(device, ref createInfo, ref allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkCommandPool[] commandPool) => vkCreateCommandPool(device, createInfo, ref allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkCommandPool[] commandPool) => vkCreateCommandPool(device, ref createInfo, allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, [In, Out]VkCommandPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkCommandPool[] commandPool) => vkCreateCommandPool(device, createInfo, allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, out pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, out pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkComputePipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, ref allocator, out descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, createInfo, ref allocator, out descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, allocator, out descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, createInfo, allocator, out descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, ref allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, createInfo, ref allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, [In, Out]VkDescriptorPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, createInfo, allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, ref allocator, out setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, createInfo, ref allocator, out setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, allocator, out setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, createInfo, allocator, out setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, ref allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, createInfo, ref allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, createInfo, allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, ref allocator, out descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, ref allocator, out descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, allocator, out descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, allocator, out descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, ref allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, ref allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, [In, Out]VkDescriptorUpdateTemplateCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => vkCreateDevice(physicalDevice, ref createInfo, ref allocator, out device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => vkCreateDevice(physicalDevice, createInfo, ref allocator, out device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDevice device) => vkCreateDevice(physicalDevice, ref createInfo, allocator, out device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDevice device) => vkCreateDevice(physicalDevice, createInfo, allocator, out device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDevice[] device) => vkCreateDevice(physicalDevice, ref createInfo, ref allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDevice[] device) => vkCreateDevice(physicalDevice, createInfo, ref allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDevice[] device) => vkCreateDevice(physicalDevice, ref createInfo, allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, [In, Out]VkDeviceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDevice[] device) => vkCreateDevice(physicalDevice, createInfo, allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFence fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => vkCreateFence(device, ref createInfo, ref allocator, out fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkFence fence);
        public static void CreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => vkCreateFence(device, createInfo, ref allocator, out fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFence fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFence fence) => vkCreateFence(device, ref createInfo, allocator, out fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFence fence);
        public static void CreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFence fence) => vkCreateFence(device, createInfo, allocator, out fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFence[] fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFence[] fence) => vkCreateFence(device, ref createInfo, ref allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFence[] fence);
        public static void CreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFence[] fence) => vkCreateFence(device, createInfo, ref allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFence[] fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFence[] fence) => vkCreateFence(device, ref createInfo, allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFence[] fence);
        public static void CreateFence(VkDevice device, [In, Out]VkFenceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFence[] fence) => vkCreateFence(device, createInfo, allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => vkCreateFramebuffer(device, ref createInfo, ref allocator, out framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => vkCreateFramebuffer(device, createInfo, ref allocator, out framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFramebuffer framebuffer) => vkCreateFramebuffer(device, ref createInfo, allocator, out framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkFramebuffer framebuffer) => vkCreateFramebuffer(device, createInfo, allocator, out framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, ref createInfo, ref allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, createInfo, ref allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, ref createInfo, allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, [In, Out]VkFramebufferCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, createInfo, allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, out pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, out pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, [In, Out]VkGraphicsPipelineCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImage image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => vkCreateImage(device, ref createInfo, ref allocator, out image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkImage image);
        public static void CreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => vkCreateImage(device, createInfo, ref allocator, out image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImage image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImage image) => vkCreateImage(device, ref createInfo, allocator, out image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImage image);
        public static void CreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImage image) => vkCreateImage(device, createInfo, allocator, out image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImage[] image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImage[] image) => vkCreateImage(device, ref createInfo, ref allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImage[] image);
        public static void CreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImage[] image) => vkCreateImage(device, createInfo, ref allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImage[] image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImage[] image) => vkCreateImage(device, ref createInfo, allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImage[] image);
        public static void CreateImage(VkDevice device, [In, Out]VkImageCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImage[] image) => vkCreateImage(device, createInfo, allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImageView view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => vkCreateImageView(device, ref createInfo, ref allocator, out view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkImageView view);
        public static void CreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => vkCreateImageView(device, createInfo, ref allocator, out view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImageView view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImageView view) => vkCreateImageView(device, ref createInfo, allocator, out view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImageView view);
        public static void CreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkImageView view) => vkCreateImageView(device, createInfo, allocator, out view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImageView[] view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImageView[] view) => vkCreateImageView(device, ref createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImageView[] view);
        public static void CreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkImageView[] view) => vkCreateImageView(device, createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImageView[] view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImageView[] view) => vkCreateImageView(device, ref createInfo, allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImageView[] view);
        public static void CreateImageView(VkDevice device, [In, Out]VkImageViewCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkImageView[] view) => vkCreateImageView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => vkCreateInstance(ref createInfo, ref allocator, out instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance);
        public static void CreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => vkCreateInstance(createInfo, ref allocator, out instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkInstance instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkInstance instance) => vkCreateInstance(ref createInfo, allocator, out instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkInstance instance);
        public static void CreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkInstance instance) => vkCreateInstance(createInfo, allocator, out instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkInstance[] instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkInstance[] instance) => vkCreateInstance(ref createInfo, ref allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkInstance[] instance);
        public static void CreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkInstance[] instance) => vkCreateInstance(createInfo, ref allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkInstance[] instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkInstance[] instance) => vkCreateInstance(ref createInfo, allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkInstance[] instance);
        public static void CreateInstance([In, Out]VkInstanceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkInstance[] instance) => vkCreateInstance(createInfo, allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, ref createInfo, ref allocator, out pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, createInfo, ref allocator, out pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, ref createInfo, allocator, out pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, createInfo, allocator, out pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, ref createInfo, ref allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, createInfo, ref allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, ref createInfo, allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, [In, Out]VkPipelineCacheCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, createInfo, allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, ref allocator, out pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, createInfo, ref allocator, out pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, allocator, out pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, createInfo, allocator, out pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, ref allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, createInfo, ref allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, [In, Out]VkPipelineLayoutCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, createInfo, allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => vkCreateQueryPool(device, ref createInfo, ref allocator, out queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => vkCreateQueryPool(device, createInfo, ref allocator, out queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkQueryPool queryPool) => vkCreateQueryPool(device, ref createInfo, allocator, out queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkQueryPool queryPool) => vkCreateQueryPool(device, createInfo, allocator, out queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkQueryPool[] queryPool) => vkCreateQueryPool(device, ref createInfo, ref allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkQueryPool[] queryPool) => vkCreateQueryPool(device, createInfo, ref allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkQueryPool[] queryPool) => vkCreateQueryPool(device, ref createInfo, allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, [In, Out]VkQueryPoolCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkQueryPool[] queryPool) => vkCreateQueryPool(device, createInfo, allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => vkCreateRenderPass(device, ref createInfo, ref allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => vkCreateRenderPass(device, createInfo, ref allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass) => vkCreateRenderPass(device, ref createInfo, allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass) => vkCreateRenderPass(device, createInfo, allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass(device, ref createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass(device, createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass(device, ref createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, [In, Out]VkRenderPassCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => vkCreateRenderPass2(device, ref createInfo, ref allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => vkCreateRenderPass2(device, createInfo, ref allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass) => vkCreateRenderPass2(device, ref createInfo, allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkRenderPass renderPass) => vkCreateRenderPass2(device, createInfo, allocator, out renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass2(device, ref createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass2(device, createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass2(device, ref createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, [In, Out]VkRenderPassCreateInfo2[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkRenderPass[] renderPass) => vkCreateRenderPass2(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => vkCreateSampler(device, ref createInfo, ref allocator, out sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler);
        public static void CreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => vkCreateSampler(device, createInfo, ref allocator, out sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSampler sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSampler sampler) => vkCreateSampler(device, ref createInfo, allocator, out sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSampler sampler);
        public static void CreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSampler sampler) => vkCreateSampler(device, createInfo, allocator, out sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSampler[] sampler) => vkCreateSampler(device, ref createInfo, ref allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSampler[] sampler) => vkCreateSampler(device, createInfo, ref allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSampler[] sampler) => vkCreateSampler(device, ref createInfo, allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, [In, Out]VkSamplerCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSampler[] sampler) => vkCreateSampler(device, createInfo, allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, ref allocator, out ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, ref allocator, out ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, allocator, out ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, allocator, out ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, ref allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, ref allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, [In, Out]VkSamplerYcbcrConversionCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => vkCreateSemaphore(device, ref createInfo, ref allocator, out semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => vkCreateSemaphore(device, createInfo, ref allocator, out semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSemaphore semaphore) => vkCreateSemaphore(device, ref createInfo, allocator, out semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSemaphore semaphore) => vkCreateSemaphore(device, createInfo, allocator, out semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSemaphore[] semaphore) => vkCreateSemaphore(device, ref createInfo, ref allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSemaphore[] semaphore) => vkCreateSemaphore(device, createInfo, ref allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSemaphore[] semaphore) => vkCreateSemaphore(device, ref createInfo, allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, [In, Out]VkSemaphoreCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSemaphore[] semaphore) => vkCreateSemaphore(device, createInfo, allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => vkCreateShaderModule(device, ref createInfo, ref allocator, out shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => vkCreateShaderModule(device, createInfo, ref allocator, out shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkShaderModule shaderModule) => vkCreateShaderModule(device, ref createInfo, allocator, out shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkShaderModule shaderModule) => vkCreateShaderModule(device, createInfo, allocator, out shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkShaderModule[] shaderModule) => vkCreateShaderModule(device, ref createInfo, ref allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkShaderModule[] shaderModule) => vkCreateShaderModule(device, createInfo, ref allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkShaderModule[] shaderModule) => vkCreateShaderModule(device, ref createInfo, allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, [In, Out]VkShaderModuleCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkShaderModule[] shaderModule) => vkCreateShaderModule(device, createInfo, allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator);
        public static void DestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator) => vkDestroyBuffer(device, buffer, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyBuffer(VkDevice device, VkBuffer buffer, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyBuffer(device, buffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator);
        public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator) => vkDestroyBufferView(device, bufferView, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyBufferView(device, bufferView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator);
        public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator) => vkDestroyCommandPool(device, commandPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyCommandPool(device, commandPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorPool(device, descriptorPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyDescriptorPool(device, descriptorPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator);
        public static void DestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator) => vkDestroyDevice(device, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDevice(VkDevice device, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyDevice(VkDevice device, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyDevice(device, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator);
        public static void DestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator) => vkDestroyFence(device, fence, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFence(VkDevice device, VkFence fence, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyFence(VkDevice device, VkFence fence, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyFence(device, fence, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator);
        public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator) => vkDestroyFramebuffer(device, framebuffer, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyFramebuffer(device, framebuffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator);
        public static void DestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator) => vkDestroyImage(device, image, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImage(VkDevice device, VkImage image, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyImage(VkDevice device, VkImage image, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyImage(device, image, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator);
        public static void DestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator) => vkDestroyImageView(device, imageView, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyImageView(VkDevice device, VkImageView imageView, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyImageView(device, imageView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator);
        public static void DestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator) => vkDestroyInstance(instance, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyInstance(VkInstance instance, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyInstance(VkInstance instance, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyInstance(instance, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator);
        public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator) => vkDestroyPipeline(device, pipeline, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyPipeline(device, pipeline, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator);
        public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator) => vkDestroyPipelineCache(device, pipelineCache, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyPipelineCache(device, pipelineCache, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator);
        public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator) => vkDestroyPipelineLayout(device, pipelineLayout, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyPipelineLayout(device, pipelineLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator);
        public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator) => vkDestroyQueryPool(device, queryPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyQueryPool(device, queryPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator);
        public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator) => vkDestroyRenderPass(device, renderPass, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyRenderPass(device, renderPass, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator);
        public static void DestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator) => vkDestroySampler(device, sampler, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySampler(VkDevice device, VkSampler sampler, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroySampler(VkDevice device, VkSampler sampler, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroySampler(device, sampler, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator);
        public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator);
        public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator) => vkDestroySemaphore(device, semaphore, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroySemaphore(device, semaphore, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator);
        public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator) => vkDestroyShaderModule(device, shaderModule, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroyShaderModule(device, shaderModule, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, ref VkExtensionProperties properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, [In, Out]uint[] propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, [In, Out]uint[] propertyCount, ref VkExtensionProperties properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, [In, Out]VkExtensionProperties[] properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, [In, Out]VkExtensionProperties[] properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, [In, Out]uint[] propertyCount, [In, Out]VkExtensionProperties[] properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, [In, Out]uint[] propertyCount, [In, Out]VkExtensionProperties[] properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkLayerProperties properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkLayerProperties properties) => vkEnumerateDeviceLayerProperties(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, ref VkLayerProperties properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, ref VkLayerProperties properties) => vkEnumerateDeviceLayerProperties(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkLayerProperties[] properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkLayerProperties[] properties) => vkEnumerateDeviceLayerProperties(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkLayerProperties[] properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkLayerProperties[] properties) => vkEnumerateDeviceLayerProperties(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, ref VkExtensionProperties properties) => vkEnumerateInstanceExtensionProperties(layerName, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, [In, Out]uint[] propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, [In, Out]uint[] propertyCount, ref VkExtensionProperties properties) => vkEnumerateInstanceExtensionProperties(layerName, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, [In, Out]VkExtensionProperties[] properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, [In, Out]VkExtensionProperties[] properties) => vkEnumerateInstanceExtensionProperties(layerName, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, [In, Out]uint[] propertyCount, [In, Out]VkExtensionProperties[] properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, [In, Out]uint[] propertyCount, [In, Out]VkExtensionProperties[] properties) => vkEnumerateInstanceExtensionProperties(layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(ref uint propertyCount, ref VkLayerProperties properties);
        public static void EnumerateInstanceLayerProperties(ref uint propertyCount, ref VkLayerProperties properties) => vkEnumerateInstanceLayerProperties(ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties([In, Out]uint[] propertyCount, ref VkLayerProperties properties);
        public static void EnumerateInstanceLayerProperties([In, Out]uint[] propertyCount, ref VkLayerProperties properties) => vkEnumerateInstanceLayerProperties(propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(ref uint propertyCount, [In, Out]VkLayerProperties[] properties);
        public static void EnumerateInstanceLayerProperties(ref uint propertyCount, [In, Out]VkLayerProperties[] properties) => vkEnumerateInstanceLayerProperties(ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties([In, Out]uint[] propertyCount, [In, Out]VkLayerProperties[] properties);
        public static void EnumerateInstanceLayerProperties([In, Out]uint[] propertyCount, [In, Out]VkLayerProperties[] properties) => vkEnumerateInstanceLayerProperties(propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceVersion(ref uint apiVersion);
        public static void EnumerateInstanceVersion(ref uint apiVersion) => vkEnumerateInstanceVersion(ref apiVersion).AssertSuccess(nameof(vkEnumerateInstanceVersion));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceVersion([In, Out]uint[] apiVersion);
        public static void EnumerateInstanceVersion([In, Out]uint[] apiVersion) => vkEnumerateInstanceVersion(apiVersion).AssertSuccess(nameof(vkEnumerateInstanceVersion));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, ref physicalDeviceGroupCount, ref physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, [In, Out]uint[] physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, [In, Out]uint[] physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, physicalDeviceGroupCount, ref physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, [In, Out]VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, [In, Out]VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, ref physicalDeviceGroupCount, physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, [In, Out]uint[] physicalDeviceGroupCount, [In, Out]VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, [In, Out]uint[] physicalDeviceGroupCount, [In, Out]VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, ref VkPhysicalDevice physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, ref VkPhysicalDevice physicalDevices) => vkEnumeratePhysicalDevices(instance, ref physicalDeviceCount, ref physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, [In, Out]uint[] physicalDeviceCount, ref VkPhysicalDevice physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, [In, Out]uint[] physicalDeviceCount, ref VkPhysicalDevice physicalDevices) => vkEnumeratePhysicalDevices(instance, physicalDeviceCount, ref physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, [In, Out]VkPhysicalDevice[] physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, [In, Out]VkPhysicalDevice[] physicalDevices) => vkEnumeratePhysicalDevices(instance, ref physicalDeviceCount, physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, [In, Out]uint[] physicalDeviceCount, [In, Out]VkPhysicalDevice[] physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, [In, Out]uint[] physicalDeviceCount, [In, Out]VkPhysicalDevice[] physicalDevices) => vkEnumeratePhysicalDevices(instance, physicalDeviceCount, physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges);
        public static void FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges) => vkFlushMappedMemoryRanges(device, memoryRangeCount, ref memoryRanges).AssertSuccess(nameof(vkFlushMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, [In, Out]VkMappedMemoryRange[] memoryRanges);
        public static void FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, [In, Out]VkMappedMemoryRange[] memoryRanges) => vkFlushMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkFlushMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer commandBuffers);
        public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer commandBuffers) => vkFreeCommandBuffers(device, commandPool, commandBufferCount, ref commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, [In, Out]VkCommandBuffer[] commandBuffers);
        public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, [In, Out]VkCommandBuffer[] commandBuffers) => vkFreeCommandBuffers(device, commandPool, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet descriptorSets);
        public static void FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet descriptorSets) => vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, ref descriptorSets).AssertSuccess(nameof(vkFreeDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets);
        public static void FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, [In, Out]VkDescriptorSet[] descriptorSets) => vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, descriptorSets).AssertSuccess(nameof(vkFreeDescriptorSets));
        [DllImport("vulkan-1")] private static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator);
        public static void FreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator) => vkFreeMemory(device, memory, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, [In, Out]VkAllocationCallbacks[] allocator);
        public static void FreeMemory(VkDevice device, VkDeviceMemory memory, [In, Out]VkAllocationCallbacks[] allocator) => vkFreeMemory(device, memory, allocator);
        [DllImport("vulkan-1")] private static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, out VkBufferDeviceAddressInfo info);
        public static void GetBufferDeviceAddress(VkDevice device, out VkBufferDeviceAddressInfo info) => vkGetBufferDeviceAddress(device, out info);
        [DllImport("vulkan-1")] private static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, [In, Out]VkBufferDeviceAddressInfo[] info);
        public static void GetBufferDeviceAddress(VkDevice device, [In, Out]VkBufferDeviceAddressInfo[] info) => vkGetBufferDeviceAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements);
        public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, [In, Out]VkMemoryRequirements[] memoryRequirements);
        public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, [In, Out]VkMemoryRequirements[] memoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => vkGetBufferMemoryRequirements2(device, ref info, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, [In, Out]VkBufferMemoryRequirementsInfo2[] info, out VkMemoryRequirements2 memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, [In, Out]VkBufferMemoryRequirementsInfo2[] info, out VkMemoryRequirements2 memoryRequirements) => vkGetBufferMemoryRequirements2(device, info, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, [In, Out]VkMemoryRequirements2[] memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, [In, Out]VkMemoryRequirements2[] memoryRequirements) => vkGetBufferMemoryRequirements2(device, ref info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, [In, Out]VkBufferMemoryRequirementsInfo2[] info, [In, Out]VkMemoryRequirements2[] memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, [In, Out]VkBufferMemoryRequirementsInfo2[] info, [In, Out]VkMemoryRequirements2[] memoryRequirements) => vkGetBufferMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, out VkBufferDeviceAddressInfo info);
        public static void GetBufferOpaqueCaptureAddress(VkDevice device, out VkBufferDeviceAddressInfo info) => vkGetBufferOpaqueCaptureAddress(device, out info);
        [DllImport("vulkan-1")] private static extern ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, [In, Out]VkBufferDeviceAddressInfo[] info);
        public static void GetBufferOpaqueCaptureAddress(VkDevice device, [In, Out]VkBufferDeviceAddressInfo[] info) => vkGetBufferOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, out VkDescriptorSetLayoutSupport support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, out VkDescriptorSetLayoutSupport support) => vkGetDescriptorSetLayoutSupport(device, ref createInfo, out support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, out VkDescriptorSetLayoutSupport support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, out VkDescriptorSetLayoutSupport support) => vkGetDescriptorSetLayoutSupport(device, createInfo, out support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkDescriptorSetLayoutSupport[] support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, [In, Out]VkDescriptorSetLayoutSupport[] support) => vkGetDescriptorSetLayoutSupport(device, ref createInfo, support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkDescriptorSetLayoutSupport[] support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, [In, Out]VkDescriptorSetLayoutCreateInfo[] createInfo, [In, Out]VkDescriptorSetLayoutSupport[] support) => vkGetDescriptorSetLayoutSupport(device, createInfo, support);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures);
        public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, [In, Out]VkPeerMemoryFeatureFlags[] peerMemoryFeatures);
        public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, [In, Out]VkPeerMemoryFeatureFlags[] peerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeatures);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize committedMemoryInBytes);
        public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize committedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, out committedMemoryInBytes);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, [In, Out]VkDeviceSize[] committedMemoryInBytes);
        public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, [In, Out]VkDeviceSize[] committedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, committedMemoryInBytes);
        [DllImport("vulkan-1")] private static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, out VkDeviceMemoryOpaqueCaptureAddressInfo info);
        public static void GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, out VkDeviceMemoryOpaqueCaptureAddressInfo info) => vkGetDeviceMemoryOpaqueCaptureAddress(device, out info);
        [DllImport("vulkan-1")] private static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, [In, Out]VkDeviceMemoryOpaqueCaptureAddressInfo[] info);
        public static void GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, [In, Out]VkDeviceMemoryOpaqueCaptureAddressInfo[] info) => vkGetDeviceMemoryOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue);
        public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, out queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, [In, Out]VkQueue[] queue);
        public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, [In, Out]VkQueue[] queue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, out VkQueue queue);
        public static void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, out VkQueue queue) => vkGetDeviceQueue2(device, ref queueInfo, out queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, [In, Out]VkDeviceQueueInfo2[] queueInfo, out VkQueue queue);
        public static void GetDeviceQueue2(VkDevice device, [In, Out]VkDeviceQueueInfo2[] queueInfo, out VkQueue queue) => vkGetDeviceQueue2(device, queueInfo, out queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, [In, Out]VkQueue[] queue);
        public static void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, [In, Out]VkQueue[] queue) => vkGetDeviceQueue2(device, ref queueInfo, queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, [In, Out]VkDeviceQueueInfo2[] queueInfo, [In, Out]VkQueue[] queue);
        public static void GetDeviceQueue2(VkDevice device, [In, Out]VkDeviceQueueInfo2[] queueInfo, [In, Out]VkQueue[] queue) => vkGetDeviceQueue2(device, queueInfo, queue);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements);
        public static void GetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements) => vkGetImageMemoryRequirements(device, image, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, [In, Out]VkMemoryRequirements[] memoryRequirements);
        public static void GetImageMemoryRequirements(VkDevice device, VkImage image, [In, Out]VkMemoryRequirements[] memoryRequirements) => vkGetImageMemoryRequirements(device, image, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => vkGetImageMemoryRequirements2(device, ref info, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, [In, Out]VkImageMemoryRequirementsInfo2[] info, out VkMemoryRequirements2 memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, [In, Out]VkImageMemoryRequirementsInfo2[] info, out VkMemoryRequirements2 memoryRequirements) => vkGetImageMemoryRequirements2(device, info, out memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, [In, Out]VkMemoryRequirements2[] memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, [In, Out]VkMemoryRequirements2[] memoryRequirements) => vkGetImageMemoryRequirements2(device, ref info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, [In, Out]VkImageMemoryRequirementsInfo2[] info, [In, Out]VkMemoryRequirements2[] memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, [In, Out]VkImageMemoryRequirementsInfo2[] info, [In, Out]VkMemoryRequirements2[] memoryRequirements) => vkGetImageMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, ref sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, ref sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, ref sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, [In, Out]uint[] sparseMemoryRequirementCount, out VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, sparseMemoryRequirementCount, out sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, [In, Out]VkImageSparseMemoryRequirementsInfo2[] info, [In, Out]uint[] sparseMemoryRequirementCount, [In, Out]VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, out VkSubresourceLayout layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, out VkSubresourceLayout layout) => vkGetImageSubresourceLayout(device, image, ref subresource, out layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, [In, Out]VkImageSubresource[] subresource, out VkSubresourceLayout layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, [In, Out]VkImageSubresource[] subresource, out VkSubresourceLayout layout) => vkGetImageSubresourceLayout(device, image, subresource, out layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, [In, Out]VkSubresourceLayout[] layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, [In, Out]VkSubresourceLayout[] layout) => vkGetImageSubresourceLayout(device, image, ref subresource, layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, [In, Out]VkImageSubresource[] subresource, [In, Out]VkSubresourceLayout[] layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, [In, Out]VkImageSubresource[] subresource, [In, Out]VkSubresourceLayout[] layout) => vkGetImageSubresourceLayout(device, image, subresource, layout);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, out VkExternalBufferProperties externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, ref externalBufferInfo, out externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, out VkExternalBufferProperties externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, externalBufferInfo, out externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, [In, Out]VkExternalBufferProperties[] externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, [In, Out]VkExternalBufferProperties[] externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, ref externalBufferInfo, externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, [In, Out]VkExternalBufferProperties[] externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, [In, Out]VkExternalBufferProperties[] externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, externalBufferInfo, externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, out VkExternalFenceProperties externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, ref externalFenceInfo, out externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, out VkExternalFenceProperties externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, externalFenceInfo, out externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, [In, Out]VkExternalFenceProperties[] externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, [In, Out]VkExternalFenceProperties[] externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, ref externalFenceInfo, externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, [In, Out]VkExternalFenceProperties[] externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, [In, Out]VkExternalFenceProperties[] externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, externalFenceInfo, externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, ref externalSemaphoreInfo, out externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, externalSemaphoreInfo, out externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, [In, Out]VkExternalSemaphoreProperties[] externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, [In, Out]VkExternalSemaphoreProperties[] externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, ref externalSemaphoreInfo, externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, [In, Out]VkExternalSemaphoreProperties[] externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, [In, Out]VkExternalSemaphoreProperties[] externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, externalSemaphoreInfo, externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features);
        public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features) => vkGetPhysicalDeviceFeatures(physicalDevice, out features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceFeatures[] features);
        public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceFeatures[] features) => vkGetPhysicalDeviceFeatures(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features);
        public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features) => vkGetPhysicalDeviceFeatures2(physicalDevice, out features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceFeatures2[] features);
        public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceFeatures2[] features) => vkGetPhysicalDeviceFeatures2(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties);
        public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, out formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, [In, Out]VkFormatProperties[] formatProperties);
        public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, [In, Out]VkFormatProperties[] formatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties);
        public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, out formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, [In, Out]VkFormatProperties2[] formatProperties);
        public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, [In, Out]VkFormatProperties2[] formatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, out imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, [In, Out]VkImageFormatProperties[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, [In, Out]VkImageFormatProperties[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, ref imageFormatInfo, out imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, imageFormatInfo, out imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, [In, Out]VkImageFormatProperties2[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, [In, Out]VkImageFormatProperties2[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, ref imageFormatInfo, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, [In, Out]VkImageFormatProperties2[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, [In, Out]VkImageFormatProperties2[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, imageFormatInfo, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, out memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceMemoryProperties[] memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceMemoryProperties[] memoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, out memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceMemoryProperties2[] memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceMemoryProperties2[] memoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties);
        public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties) => vkGetPhysicalDeviceProperties(physicalDevice, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceProperties[] properties);
        public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceProperties[] properties) => vkGetPhysicalDeviceProperties(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties);
        public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties) => vkGetPhysicalDeviceProperties2(physicalDevice, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceProperties2[] properties);
        public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceProperties2[] properties) => vkGetPhysicalDeviceProperties2(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, out VkQueueFamilyProperties queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, out VkQueueFamilyProperties queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, ref queueFamilyPropertyCount, out queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, out VkQueueFamilyProperties queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, out VkQueueFamilyProperties queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, queueFamilyPropertyCount, out queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, out VkQueueFamilyProperties2 queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, out VkQueueFamilyProperties2 queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, ref queueFamilyPropertyCount, out queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, out VkQueueFamilyProperties2 queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, out VkQueueFamilyProperties2 queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, queueFamilyPropertyCount, out queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties2[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties2[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties2[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] queueFamilyPropertyCount, [In, Out]VkQueueFamilyProperties2[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, out VkSparseImageFormatProperties properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, out VkSparseImageFormatProperties properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, out VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, out VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, ref propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, out VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, out VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, ref propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, [In, Out]uint[] propertyCount, out VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, propertyCount, out properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, [In, Out]uint[] propertyCount, [In, Out]VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, out nuint dataSize, void* data);
        public static void GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, out nuint dataSize, void* data) => vkGetPipelineCacheData(device, pipelineCache, out dataSize, data).AssertSuccess(nameof(vkGetPipelineCacheData));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, [In, Out]nuint[] dataSize, void* data);
        public static void GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, [In, Out]nuint[] dataSize, void* data) => vkGetPipelineCacheData(device, pipelineCache, dataSize, data).AssertSuccess(nameof(vkGetPipelineCacheData));
        [DllImport("vulkan-1")] private static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity);
        public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity) => vkGetRenderAreaGranularity(device, renderPass, out granularity);
        [DllImport("vulkan-1")] private static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, [In, Out]VkExtent2D[] granularity);
        public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, [In, Out]VkExtent2D[] granularity) => vkGetRenderAreaGranularity(device, renderPass, granularity);
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, out ulong value);
        public static void GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, out ulong value) => vkGetSemaphoreCounterValue(device, semaphore, out value).AssertSuccess(nameof(vkGetSemaphoreCounterValue));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, [In, Out]ulong[] value);
        public static void GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, [In, Out]ulong[] value) => vkGetSemaphoreCounterValue(device, semaphore, value).AssertSuccess(nameof(vkGetSemaphoreCounterValue));
        [DllImport("vulkan-1")] private static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges);
        public static void InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges) => vkInvalidateMappedMemoryRanges(device, memoryRangeCount, ref memoryRanges).AssertSuccess(nameof(vkInvalidateMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, [In, Out]VkMappedMemoryRange[] memoryRanges);
        public static void InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, [In, Out]VkMappedMemoryRange[] memoryRanges) => vkInvalidateMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkInvalidateMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache srcCaches);
        public static void MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache srcCaches) => vkMergePipelineCaches(device, dstCache, srcCacheCount, ref srcCaches).AssertSuccess(nameof(vkMergePipelineCaches));
        [DllImport("vulkan-1")] private static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, [In, Out]VkPipelineCache[] srcCaches);
        public static void MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, [In, Out]VkPipelineCache[] srcCaches) => vkMergePipelineCaches(device, dstCache, srcCacheCount, srcCaches).AssertSuccess(nameof(vkMergePipelineCaches));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence);
        public static void QueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence) => vkQueueBindSparse(queue, bindInfoCount, ref bindInfo, fence).AssertSuccess(nameof(vkQueueBindSparse));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, [In, Out]VkBindSparseInfo[] bindInfo, VkFence fence);
        public static void QueueBindSparse(VkQueue queue, uint bindInfoCount, [In, Out]VkBindSparseInfo[] bindInfo, VkFence fence) => vkQueueBindSparse(queue, bindInfoCount, bindInfo, fence).AssertSuccess(nameof(vkQueueBindSparse));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueSubmit(VkQueue queue, uint submitCount, ref VkSubmitInfo submits, VkFence fence);
        public static void QueueSubmit(VkQueue queue, uint submitCount, ref VkSubmitInfo submits, VkFence fence) => vkQueueSubmit(queue, submitCount, ref submits, fence).AssertSuccess(nameof(vkQueueSubmit));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueSubmit(VkQueue queue, uint submitCount, [In, Out]VkSubmitInfo[] submits, VkFence fence);
        public static void QueueSubmit(VkQueue queue, uint submitCount, [In, Out]VkSubmitInfo[] submits, VkFence fence) => vkQueueSubmit(queue, submitCount, submits, fence).AssertSuccess(nameof(vkQueueSubmit));
        [DllImport("vulkan-1")] private static extern VkResult vkResetFences(VkDevice device, uint fenceCount, ref VkFence fences);
        public static void ResetFences(VkDevice device, uint fenceCount, ref VkFence fences) => vkResetFences(device, fenceCount, ref fences).AssertSuccess(nameof(vkResetFences));
        [DllImport("vulkan-1")] private static extern VkResult vkResetFences(VkDevice device, uint fenceCount, [In, Out]VkFence[] fences);
        public static void ResetFences(VkDevice device, uint fenceCount, [In, Out]VkFence[] fences) => vkResetFences(device, fenceCount, fences).AssertSuccess(nameof(vkResetFences));
        [DllImport("vulkan-1")] private static extern VkResult vkSignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo signalInfo);
        public static void SignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo signalInfo) => vkSignalSemaphore(device, ref signalInfo).AssertSuccess(nameof(vkSignalSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkSignalSemaphore(VkDevice device, [In, Out]VkSemaphoreSignalInfo[] signalInfo);
        public static void SignalSemaphore(VkDevice device, [In, Out]VkSemaphoreSignalInfo[] signalInfo) => vkSignalSemaphore(device, signalInfo).AssertSuccess(nameof(vkSignalSemaphore));
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, ref descriptorWrites, descriptorCopyCount, ref descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, ref descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, [In, Out]VkCopyDescriptorSet[] descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, [In, Out]VkCopyDescriptorSet[] descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, ref descriptorWrites, descriptorCopyCount, descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, [In, Out]VkCopyDescriptorSet[] descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, [In, Out]VkCopyDescriptorSet[] descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
        [DllImport("vulkan-1")] private static extern VkResult vkWaitForFences(VkDevice device, uint fenceCount, ref VkFence fences, VkBool32 waitAll, ulong timeout);
        public static void WaitForFences(VkDevice device, uint fenceCount, ref VkFence fences, VkBool32 waitAll, ulong timeout) => vkWaitForFences(device, fenceCount, ref fences, waitAll, timeout).AssertSuccess(nameof(vkWaitForFences));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitForFences(VkDevice device, uint fenceCount, [In, Out]VkFence[] fences, VkBool32 waitAll, ulong timeout);
        public static void WaitForFences(VkDevice device, uint fenceCount, [In, Out]VkFence[] fences, VkBool32 waitAll, ulong timeout) => vkWaitForFences(device, fenceCount, fences, waitAll, timeout).AssertSuccess(nameof(vkWaitForFences));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout);
        public static void WaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout) => vkWaitSemaphores(device, ref waitInfo, timeout).AssertSuccess(nameof(vkWaitSemaphores));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitSemaphores(VkDevice device, [In, Out]VkSemaphoreWaitInfo[] waitInfo, ulong timeout);
        public static void WaitSemaphores(VkDevice device, [In, Out]VkSemaphoreWaitInfo[] waitInfo, ulong timeout) => vkWaitSemaphores(device, waitInfo, timeout).AssertSuccess(nameof(vkWaitSemaphores));
    }
}