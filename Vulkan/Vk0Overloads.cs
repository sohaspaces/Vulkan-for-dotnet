using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Handles;
using Vulkan.Structs;

namespace Vulkan
{
    public static unsafe partial class Vk
    {
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, ref VkCommandBuffer commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, ref VkCommandBuffer commandBuffers) => vkAllocateCommandBuffers(device, ref allocateInfo, ref commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo[] allocateInfo, ref VkCommandBuffer commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo[] allocateInfo, ref VkCommandBuffer commandBuffers) => vkAllocateCommandBuffers(device, allocateInfo, ref commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, VkCommandBuffer[] commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, VkCommandBuffer[] commandBuffers) => vkAllocateCommandBuffers(device, ref allocateInfo, commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo[] allocateInfo, VkCommandBuffer[] commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo[] allocateInfo, VkCommandBuffer[] commandBuffers) => vkAllocateCommandBuffers(device, allocateInfo, commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, ref VkDescriptorSet descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, ref VkDescriptorSet descriptorSets) => vkAllocateDescriptorSets(device, ref allocateInfo, ref descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo[] allocateInfo, ref VkDescriptorSet descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo[] allocateInfo, ref VkDescriptorSet descriptorSets) => vkAllocateDescriptorSets(device, allocateInfo, ref descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, VkDescriptorSet[] descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, VkDescriptorSet[] descriptorSets) => vkAllocateDescriptorSets(device, ref allocateInfo, descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo[] allocateInfo, VkDescriptorSet[] descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo[] allocateInfo, VkDescriptorSet[] descriptorSets) => vkAllocateDescriptorSets(device, allocateInfo, descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, ref VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, ref VkDeviceMemory memory) => vkAllocateMemory(device, ref allocateInfo, ref allocator, ref memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, ref VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, ref VkDeviceMemory memory) => vkAllocateMemory(device, allocateInfo, ref allocator, ref memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks[] allocator, ref VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks[] allocator, ref VkDeviceMemory memory) => vkAllocateMemory(device, ref allocateInfo, allocator, ref memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, VkAllocationCallbacks[] allocator, ref VkDeviceMemory memory);
        public static void AllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, VkAllocationCallbacks[] allocator, ref VkDeviceMemory memory) => vkAllocateMemory(device, allocateInfo, allocator, ref memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, VkDeviceMemory[] memory) => vkAllocateMemory(device, ref allocateInfo, ref allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, ref VkAllocationCallbacks allocator, VkDeviceMemory[] memory) => vkAllocateMemory(device, allocateInfo, ref allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks[] allocator, VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks[] allocator, VkDeviceMemory[] memory) => vkAllocateMemory(device, ref allocateInfo, allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, VkAllocationCallbacks[] allocator, VkDeviceMemory[] memory);
        public static void AllocateMemory(VkDevice device, VkMemoryAllocateInfo[] allocateInfo, VkAllocationCallbacks[] allocator, VkDeviceMemory[] memory) => vkAllocateMemory(device, allocateInfo, allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo);
        public static void BeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo) => vkBeginCommandBuffer(commandBuffer, ref beginInfo).AssertSuccess(nameof(vkBeginCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo[] beginInfo);
        public static void BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo[] beginInfo) => vkBeginCommandBuffer(commandBuffer, beginInfo).AssertSuccess(nameof(vkBeginCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, ref VkBindBufferMemoryInfo bindInfos);
        public static void BindBufferMemory2(VkDevice device, uint bindInfoCount, ref VkBindBufferMemoryInfo bindInfos) => vkBindBufferMemory2(device, bindInfoCount, ref bindInfos).AssertSuccess(nameof(vkBindBufferMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo[] bindInfos);
        public static void BindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo[] bindInfos) => vkBindBufferMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindBufferMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, ref VkBindImageMemoryInfo bindInfos);
        public static void BindImageMemory2(VkDevice device, uint bindInfoCount, ref VkBindImageMemoryInfo bindInfos) => vkBindImageMemory2(device, bindInfoCount, ref bindInfos).AssertSuccess(nameof(vkBindImageMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo[] bindInfos);
        public static void BindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo[] bindInfos) => vkBindImageMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindImageMemory2));
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents);
        public static void CmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, ref renderPassBegin, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, VkSubpassContents contents);
        public static void CmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, renderPassBegin, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, ref renderPassBegin, ref subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, renderPassBegin, ref subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassBeginInfo[] subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassBeginInfo[] subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, ref renderPassBegin, subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, VkSubpassBeginInfo[] subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo[] renderPassBegin, VkSubpassBeginInfo[] subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, renderPassBegin, subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ref descriptorSets, dynamicOffsetCount, ref dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, ref uint dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, ref dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ref descriptorSets, dynamicOffsetCount, dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, buffers, ref offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, ref buffers, offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, buffers, offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit regions, VkFilter filter);
        public static void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit regions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions, filter);
        [DllImport("vulkan-1")] private static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit[] regions, VkFilter filter);
        public static void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit[] regions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions, filter);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, ref VkClearRect rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, ref VkClearRect rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, ref attachments, rectCount, ref rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, ref VkClearRect rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, ref VkClearRect rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, attachments, rectCount, ref rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, VkClearRect[] rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment attachments, uint rectCount, VkClearRect[] rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, ref attachments, rectCount, rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, VkClearRect[] rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, VkClearRect[] rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, attachments, rectCount, rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, ref color, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue[] color, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue[] color, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, color, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, VkImageSubresourceRange[] ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, VkImageSubresourceRange[] ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, ref color, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue[] color, uint rangeCount, VkImageSubresourceRange[] ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue[] color, uint rangeCount, VkImageSubresourceRange[] ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, color, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue[] depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue[] depthStencil, uint rangeCount, ref VkImageSubresourceRange ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, depthStencil, rangeCount, ref ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue[] depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue[] depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy regions);
        public static void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy regions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy[] regions);
        public static void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy[] regions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy regions);
        public static void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy regions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy[] regions);
        public static void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy[] regions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy regions);
        public static void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy regions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy[] regions);
        public static void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy[] regions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy regions);
        public static void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy regions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy[] regions);
        public static void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy[] regions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo[] subpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer commandBuffers);
        public static void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer commandBuffers) => vkCmdExecuteCommands(commandBuffer, commandBufferCount, ref commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer[] commandBuffers);
        public static void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => vkCmdExecuteCommands(commandBuffer, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, ref subpassBeginInfo, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo[] subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo[] subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, subpassBeginInfo, ref subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, VkSubpassEndInfo[] subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, ref subpassBeginInfo, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo[] subpassBeginInfo, VkSubpassEndInfo[] subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo[] subpassBeginInfo, VkSubpassEndInfo[] subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, subpassBeginInfo, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, ref imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, ref bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ref memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve regions);
        public static void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve regions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ref regions);
        [DllImport("vulkan-1")] private static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve[] regions);
        public static void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve[] regions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D scissors);
        public static void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D scissors) => vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, ref scissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D[] scissors);
        public static void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D[] scissors) => vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, scissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport viewports);
        public static void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport viewports) => vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, ref viewports);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport[] viewports);
        public static void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport[] viewports) => vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, viewports);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkBuffer buffer) => vkCreateBuffer(device, ref createInfo, ref allocator, ref buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkBuffer buffer) => vkCreateBuffer(device, createInfo, ref allocator, ref buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkBuffer buffer) => vkCreateBuffer(device, ref createInfo, allocator, ref buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkBuffer buffer);
        public static void CreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkBuffer buffer) => vkCreateBuffer(device, createInfo, allocator, ref buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkBuffer[] buffer) => vkCreateBuffer(device, ref createInfo, ref allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkBuffer[] buffer) => vkCreateBuffer(device, createInfo, ref allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkBuffer[] buffer) => vkCreateBuffer(device, ref createInfo, allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkBuffer[] buffer);
        public static void CreateBuffer(VkDevice device, VkBufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkBuffer[] buffer) => vkCreateBuffer(device, createInfo, allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkBufferView view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkBufferView view) => vkCreateBufferView(device, ref createInfo, ref allocator, ref view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkBufferView view);
        public static void CreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkBufferView view) => vkCreateBufferView(device, createInfo, ref allocator, ref view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkBufferView view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkBufferView view) => vkCreateBufferView(device, ref createInfo, allocator, ref view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkBufferView view);
        public static void CreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkBufferView view) => vkCreateBufferView(device, createInfo, allocator, ref view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkBufferView[] view) => vkCreateBufferView(device, ref createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkBufferView[] view) => vkCreateBufferView(device, createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkBufferView[] view) => vkCreateBufferView(device, ref createInfo, allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkBufferView[] view);
        public static void CreateBufferView(VkDevice device, VkBufferViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkBufferView[] view) => vkCreateBufferView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkCommandPool commandPool) => vkCreateCommandPool(device, ref createInfo, ref allocator, ref commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkCommandPool commandPool) => vkCreateCommandPool(device, createInfo, ref allocator, ref commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkCommandPool commandPool) => vkCreateCommandPool(device, ref createInfo, allocator, ref commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkCommandPool commandPool);
        public static void CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkCommandPool commandPool) => vkCreateCommandPool(device, createInfo, allocator, ref commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkCommandPool[] commandPool) => vkCreateCommandPool(device, ref createInfo, ref allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkCommandPool[] commandPool) => vkCreateCommandPool(device, createInfo, ref allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkCommandPool[] commandPool) => vkCreateCommandPool(device, ref createInfo, allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkCommandPool[] commandPool);
        public static void CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkCommandPool[] commandPool) => vkCreateCommandPool(device, createInfo, allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, ref allocator, ref descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, createInfo, ref allocator, ref descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, allocator, ref descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorPool descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorPool descriptorPool) => vkCreateDescriptorPool(device, createInfo, allocator, ref descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, ref allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, createInfo, ref allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, ref createInfo, allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorPool[] descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorPool[] descriptorPool) => vkCreateDescriptorPool(device, createInfo, allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, ref allocator, ref setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, createInfo, ref allocator, ref setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, allocator, ref setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorSetLayout setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorSetLayout setLayout) => vkCreateDescriptorSetLayout(device, createInfo, allocator, ref setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, ref allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, createInfo, ref allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, ref createInfo, allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorSetLayout[] setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorSetLayout[] setLayout) => vkCreateDescriptorSetLayout(device, createInfo, allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, ref allocator, ref descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, ref allocator, ref descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, allocator, ref descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDescriptorUpdateTemplate descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, allocator, ref descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, ref allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, ref allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, ref createInfo, allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDescriptorUpdateTemplate[] descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDevice device) => vkCreateDevice(physicalDevice, ref createInfo, ref allocator, ref device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDevice device) => vkCreateDevice(physicalDevice, createInfo, ref allocator, ref device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDevice device) => vkCreateDevice(physicalDevice, ref createInfo, allocator, ref device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDevice device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDevice device) => vkCreateDevice(physicalDevice, createInfo, allocator, ref device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDevice[] device) => vkCreateDevice(physicalDevice, ref createInfo, ref allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDevice[] device) => vkCreateDevice(physicalDevice, createInfo, ref allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDevice[] device) => vkCreateDevice(physicalDevice, ref createInfo, allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDevice[] device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDevice[] device) => vkCreateDevice(physicalDevice, createInfo, allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkCreateFence(device, ref createInfo, ref allocator, ref fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void CreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkCreateFence(device, createInfo, ref allocator, ref fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkCreateFence(device, ref createInfo, allocator, ref fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void CreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkCreateFence(device, createInfo, allocator, ref fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkCreateFence(device, ref createInfo, ref allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void CreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkCreateFence(device, createInfo, ref allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkCreateFence(device, ref createInfo, allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void CreateFence(VkDevice device, VkFenceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkCreateFence(device, createInfo, allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkFramebuffer framebuffer) => vkCreateFramebuffer(device, ref createInfo, ref allocator, ref framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkFramebuffer framebuffer) => vkCreateFramebuffer(device, createInfo, ref allocator, ref framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkFramebuffer framebuffer) => vkCreateFramebuffer(device, ref createInfo, allocator, ref framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkFramebuffer framebuffer);
        public static void CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkFramebuffer framebuffer) => vkCreateFramebuffer(device, createInfo, allocator, ref framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, ref createInfo, ref allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, createInfo, ref allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, ref createInfo, allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkFramebuffer[] framebuffer);
        public static void CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkFramebuffer[] framebuffer) => vkCreateFramebuffer(device, createInfo, allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, ref createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkImage image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkImage image) => vkCreateImage(device, ref createInfo, ref allocator, ref image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkImage image);
        public static void CreateImage(VkDevice device, VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkImage image) => vkCreateImage(device, createInfo, ref allocator, ref image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkImage image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkImage image) => vkCreateImage(device, ref createInfo, allocator, ref image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkImage image);
        public static void CreateImage(VkDevice device, VkImageCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkImage image) => vkCreateImage(device, createInfo, allocator, ref image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkImage[] image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkImage[] image) => vkCreateImage(device, ref createInfo, ref allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkImage[] image);
        public static void CreateImage(VkDevice device, VkImageCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkImage[] image) => vkCreateImage(device, createInfo, ref allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkImage[] image);
        public static void CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkImage[] image) => vkCreateImage(device, ref createInfo, allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkImage[] image);
        public static void CreateImage(VkDevice device, VkImageCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkImage[] image) => vkCreateImage(device, createInfo, allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkImageView view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkImageView view) => vkCreateImageView(device, ref createInfo, ref allocator, ref view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkImageView view);
        public static void CreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkImageView view) => vkCreateImageView(device, createInfo, ref allocator, ref view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkImageView view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkImageView view) => vkCreateImageView(device, ref createInfo, allocator, ref view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkImageView view);
        public static void CreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkImageView view) => vkCreateImageView(device, createInfo, allocator, ref view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkImageView[] view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkImageView[] view) => vkCreateImageView(device, ref createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkImageView[] view);
        public static void CreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkImageView[] view) => vkCreateImageView(device, createInfo, ref allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkImageView[] view);
        public static void CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkImageView[] view) => vkCreateImageView(device, ref createInfo, allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkImageView[] view);
        public static void CreateImageView(VkDevice device, VkImageViewCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkImageView[] view) => vkCreateImageView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkInstance instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkInstance instance) => vkCreateInstance(ref createInfo, ref allocator, ref instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkInstance instance);
        public static void CreateInstance(VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkInstance instance) => vkCreateInstance(createInfo, ref allocator, ref instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkInstance instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkInstance instance) => vkCreateInstance(ref createInfo, allocator, ref instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(VkInstanceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkInstance instance);
        public static void CreateInstance(VkInstanceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkInstance instance) => vkCreateInstance(createInfo, allocator, ref instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkInstance[] instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkInstance[] instance) => vkCreateInstance(ref createInfo, ref allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkInstance[] instance);
        public static void CreateInstance(VkInstanceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkInstance[] instance) => vkCreateInstance(createInfo, ref allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkInstance[] instance);
        public static void CreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkInstance[] instance) => vkCreateInstance(ref createInfo, allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(VkInstanceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkInstance[] instance);
        public static void CreateInstance(VkInstanceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkInstance[] instance) => vkCreateInstance(createInfo, allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, ref createInfo, ref allocator, ref pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, createInfo, ref allocator, ref pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, ref createInfo, allocator, ref pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineCache pipelineCache);
        public static void CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineCache pipelineCache) => vkCreatePipelineCache(device, createInfo, allocator, ref pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, ref createInfo, ref allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, createInfo, ref allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, ref createInfo, allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkPipelineCache[] pipelineCache);
        public static void CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkPipelineCache[] pipelineCache) => vkCreatePipelineCache(device, createInfo, allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, ref allocator, ref pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, createInfo, ref allocator, ref pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, allocator, ref pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineLayout pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkPipelineLayout pipelineLayout) => vkCreatePipelineLayout(device, createInfo, allocator, ref pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, ref allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, createInfo, ref allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, ref createInfo, allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkPipelineLayout[] pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkPipelineLayout[] pipelineLayout) => vkCreatePipelineLayout(device, createInfo, allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkQueryPool queryPool) => vkCreateQueryPool(device, ref createInfo, ref allocator, ref queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkQueryPool queryPool) => vkCreateQueryPool(device, createInfo, ref allocator, ref queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkQueryPool queryPool) => vkCreateQueryPool(device, ref createInfo, allocator, ref queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkQueryPool queryPool);
        public static void CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkQueryPool queryPool) => vkCreateQueryPool(device, createInfo, allocator, ref queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkQueryPool[] queryPool) => vkCreateQueryPool(device, ref createInfo, ref allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkQueryPool[] queryPool) => vkCreateQueryPool(device, createInfo, ref allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkQueryPool[] queryPool) => vkCreateQueryPool(device, ref createInfo, allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkQueryPool[] queryPool);
        public static void CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkQueryPool[] queryPool) => vkCreateQueryPool(device, createInfo, allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass) => vkCreateRenderPass(device, ref createInfo, ref allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass) => vkCreateRenderPass(device, createInfo, ref allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass) => vkCreateRenderPass(device, ref createInfo, allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass) => vkCreateRenderPass(device, createInfo, allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass) => vkCreateRenderPass(device, ref createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass) => vkCreateRenderPass(device, createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass) => vkCreateRenderPass(device, ref createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass(VkDevice device, VkRenderPassCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass) => vkCreateRenderPass(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass) => vkCreateRenderPass2(device, ref createInfo, ref allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, ref VkRenderPass renderPass) => vkCreateRenderPass2(device, createInfo, ref allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass) => vkCreateRenderPass2(device, ref createInfo, allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass);
        public static void CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, VkAllocationCallbacks[] allocator, ref VkRenderPass renderPass) => vkCreateRenderPass2(device, createInfo, allocator, ref renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass) => vkCreateRenderPass2(device, ref createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, ref VkAllocationCallbacks allocator, VkRenderPass[] renderPass) => vkCreateRenderPass2(device, createInfo, ref allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass) => vkCreateRenderPass2(device, ref createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass);
        public static void CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2[] createInfo, VkAllocationCallbacks[] allocator, VkRenderPass[] renderPass) => vkCreateRenderPass2(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSampler sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSampler sampler) => vkCreateSampler(device, ref createInfo, ref allocator, ref sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSampler sampler);
        public static void CreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSampler sampler) => vkCreateSampler(device, createInfo, ref allocator, ref sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSampler sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSampler sampler) => vkCreateSampler(device, ref createInfo, allocator, ref sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSampler sampler);
        public static void CreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSampler sampler) => vkCreateSampler(device, createInfo, allocator, ref sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSampler[] sampler) => vkCreateSampler(device, ref createInfo, ref allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSampler[] sampler) => vkCreateSampler(device, createInfo, ref allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSampler[] sampler) => vkCreateSampler(device, ref createInfo, allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSampler[] sampler);
        public static void CreateSampler(VkDevice device, VkSamplerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSampler[] sampler) => vkCreateSampler(device, createInfo, allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, ref allocator, ref ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, ref allocator, ref ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, allocator, ref ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSamplerYcbcrConversion ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSamplerYcbcrConversion ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, allocator, ref ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, ref allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, ref allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, ref createInfo, allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSamplerYcbcrConversion[] ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSamplerYcbcrConversion[] ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSemaphore semaphore) => vkCreateSemaphore(device, ref createInfo, ref allocator, ref semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSemaphore semaphore) => vkCreateSemaphore(device, createInfo, ref allocator, ref semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSemaphore semaphore) => vkCreateSemaphore(device, ref createInfo, allocator, ref semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSemaphore semaphore);
        public static void CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSemaphore semaphore) => vkCreateSemaphore(device, createInfo, allocator, ref semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSemaphore[] semaphore) => vkCreateSemaphore(device, ref createInfo, ref allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSemaphore[] semaphore) => vkCreateSemaphore(device, createInfo, ref allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSemaphore[] semaphore) => vkCreateSemaphore(device, ref createInfo, allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSemaphore[] semaphore);
        public static void CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSemaphore[] semaphore) => vkCreateSemaphore(device, createInfo, allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkShaderModule shaderModule) => vkCreateShaderModule(device, ref createInfo, ref allocator, ref shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkShaderModule shaderModule) => vkCreateShaderModule(device, createInfo, ref allocator, ref shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkShaderModule shaderModule) => vkCreateShaderModule(device, ref createInfo, allocator, ref shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkShaderModule shaderModule);
        public static void CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkShaderModule shaderModule) => vkCreateShaderModule(device, createInfo, allocator, ref shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkShaderModule[] shaderModule) => vkCreateShaderModule(device, ref createInfo, ref allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkShaderModule[] shaderModule) => vkCreateShaderModule(device, createInfo, ref allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkShaderModule[] shaderModule) => vkCreateShaderModule(device, ref createInfo, allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkShaderModule[] shaderModule);
        public static void CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkShaderModule[] shaderModule) => vkCreateShaderModule(device, createInfo, allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator);
        public static void DestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator) => vkDestroyBuffer(device, buffer, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks[] allocator);
        public static void DestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks[] allocator) => vkDestroyBuffer(device, buffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator);
        public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator) => vkDestroyBufferView(device, bufferView, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks[] allocator);
        public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks[] allocator) => vkDestroyBufferView(device, bufferView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator);
        public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator) => vkDestroyCommandPool(device, commandPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks[] allocator);
        public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks[] allocator) => vkDestroyCommandPool(device, commandPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorPool(device, descriptorPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks[] allocator) => vkDestroyDescriptorPool(device, descriptorPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks[] allocator) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator);
        public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks[] allocator);
        public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks[] allocator) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator);
        public static void DestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator) => vkDestroyDevice(device, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks[] allocator);
        public static void DestroyDevice(VkDevice device, VkAllocationCallbacks[] allocator) => vkDestroyDevice(device, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator);
        public static void DestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator) => vkDestroyFence(device, fence, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks[] allocator);
        public static void DestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks[] allocator) => vkDestroyFence(device, fence, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator);
        public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator) => vkDestroyFramebuffer(device, framebuffer, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks[] allocator);
        public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks[] allocator) => vkDestroyFramebuffer(device, framebuffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator);
        public static void DestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator) => vkDestroyImage(device, image, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks[] allocator);
        public static void DestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks[] allocator) => vkDestroyImage(device, image, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator);
        public static void DestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator) => vkDestroyImageView(device, imageView, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks[] allocator);
        public static void DestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks[] allocator) => vkDestroyImageView(device, imageView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator);
        public static void DestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator) => vkDestroyInstance(instance, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks[] allocator);
        public static void DestroyInstance(VkInstance instance, VkAllocationCallbacks[] allocator) => vkDestroyInstance(instance, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator);
        public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator) => vkDestroyPipeline(device, pipeline, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks[] allocator);
        public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks[] allocator) => vkDestroyPipeline(device, pipeline, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator);
        public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator) => vkDestroyPipelineCache(device, pipelineCache, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks[] allocator);
        public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks[] allocator) => vkDestroyPipelineCache(device, pipelineCache, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator);
        public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator) => vkDestroyPipelineLayout(device, pipelineLayout, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks[] allocator);
        public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks[] allocator) => vkDestroyPipelineLayout(device, pipelineLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator);
        public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator) => vkDestroyQueryPool(device, queryPool, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks[] allocator);
        public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks[] allocator) => vkDestroyQueryPool(device, queryPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator);
        public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator) => vkDestroyRenderPass(device, renderPass, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks[] allocator);
        public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks[] allocator) => vkDestroyRenderPass(device, renderPass, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator);
        public static void DestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator) => vkDestroySampler(device, sampler, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks[] allocator);
        public static void DestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks[] allocator) => vkDestroySampler(device, sampler, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator);
        public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks[] allocator);
        public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks[] allocator) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator);
        public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator) => vkDestroySemaphore(device, semaphore, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks[] allocator);
        public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks[] allocator) => vkDestroySemaphore(device, semaphore, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator);
        public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator) => vkDestroyShaderModule(device, shaderModule, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks[] allocator);
        public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks[] allocator) => vkDestroyShaderModule(device, shaderModule, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, ref VkExtensionProperties properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint[] propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint[] propertyCount, ref VkExtensionProperties properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, VkExtensionProperties[] properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, VkExtensionProperties[] properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint[] propertyCount, VkExtensionProperties[] properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint[] propertyCount, VkExtensionProperties[] properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkLayerProperties properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkLayerProperties properties) => vkEnumerateDeviceLayerProperties(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkLayerProperties properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkLayerProperties properties) => vkEnumerateDeviceLayerProperties(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkLayerProperties[] properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkLayerProperties[] properties) => vkEnumerateDeviceLayerProperties(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkLayerProperties[] properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkLayerProperties[] properties) => vkEnumerateDeviceLayerProperties(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, ref VkExtensionProperties properties) => vkEnumerateInstanceExtensionProperties(layerName, ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, uint[] propertyCount, ref VkExtensionProperties properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, uint[] propertyCount, ref VkExtensionProperties properties) => vkEnumerateInstanceExtensionProperties(layerName, propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, VkExtensionProperties[] properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, VkExtensionProperties[] properties) => vkEnumerateInstanceExtensionProperties(layerName, ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, uint[] propertyCount, VkExtensionProperties[] properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, uint[] propertyCount, VkExtensionProperties[] properties) => vkEnumerateInstanceExtensionProperties(layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(ref uint propertyCount, ref VkLayerProperties properties);
        public static void EnumerateInstanceLayerProperties(ref uint propertyCount, ref VkLayerProperties properties) => vkEnumerateInstanceLayerProperties(ref propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(uint[] propertyCount, ref VkLayerProperties properties);
        public static void EnumerateInstanceLayerProperties(uint[] propertyCount, ref VkLayerProperties properties) => vkEnumerateInstanceLayerProperties(propertyCount, ref properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(ref uint propertyCount, VkLayerProperties[] properties);
        public static void EnumerateInstanceLayerProperties(ref uint propertyCount, VkLayerProperties[] properties) => vkEnumerateInstanceLayerProperties(ref propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(uint[] propertyCount, VkLayerProperties[] properties);
        public static void EnumerateInstanceLayerProperties(uint[] propertyCount, VkLayerProperties[] properties) => vkEnumerateInstanceLayerProperties(propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceVersion(ref uint apiVersion);
        public static void EnumerateInstanceVersion(ref uint apiVersion) => vkEnumerateInstanceVersion(ref apiVersion).AssertSuccess(nameof(vkEnumerateInstanceVersion));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceVersion(uint[] apiVersion);
        public static void EnumerateInstanceVersion(uint[] apiVersion) => vkEnumerateInstanceVersion(apiVersion).AssertSuccess(nameof(vkEnumerateInstanceVersion));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, ref physicalDeviceGroupCount, ref physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint[] physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, uint[] physicalDeviceGroupCount, ref VkPhysicalDeviceGroupProperties physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, physicalDeviceGroupCount, ref physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, ref physicalDeviceGroupCount, physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint[] physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, uint[] physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, ref VkPhysicalDevice physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, ref VkPhysicalDevice physicalDevices) => vkEnumeratePhysicalDevices(instance, ref physicalDeviceCount, ref physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint[] physicalDeviceCount, ref VkPhysicalDevice physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, uint[] physicalDeviceCount, ref VkPhysicalDevice physicalDevices) => vkEnumeratePhysicalDevices(instance, physicalDeviceCount, ref physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, VkPhysicalDevice[] physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, VkPhysicalDevice[] physicalDevices) => vkEnumeratePhysicalDevices(instance, ref physicalDeviceCount, physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint[] physicalDeviceCount, VkPhysicalDevice[] physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, uint[] physicalDeviceCount, VkPhysicalDevice[] physicalDevices) => vkEnumeratePhysicalDevices(instance, physicalDeviceCount, physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges);
        public static void FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges) => vkFlushMappedMemoryRanges(device, memoryRangeCount, ref memoryRanges).AssertSuccess(nameof(vkFlushMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges);
        public static void FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => vkFlushMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkFlushMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer commandBuffers);
        public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer commandBuffers) => vkFreeCommandBuffers(device, commandPool, commandBufferCount, ref commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer[] commandBuffers);
        public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => vkFreeCommandBuffers(device, commandPool, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet descriptorSets);
        public static void FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet descriptorSets) => vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, ref descriptorSets).AssertSuccess(nameof(vkFreeDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet[] descriptorSets);
        public static void FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet[] descriptorSets) => vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, descriptorSets).AssertSuccess(nameof(vkFreeDescriptorSets));
        [DllImport("vulkan-1")] private static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator);
        public static void FreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator) => vkFreeMemory(device, memory, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks[] allocator);
        public static void FreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks[] allocator) => vkFreeMemory(device, memory, allocator);
        [DllImport("vulkan-1")] private static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, ref VkBufferDeviceAddressInfo info);
        public static void GetBufferDeviceAddress(VkDevice device, ref VkBufferDeviceAddressInfo info) => vkGetBufferDeviceAddress(device, ref info);
        [DllImport("vulkan-1")] private static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo[] info);
        public static void GetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo[] info) => vkGetBufferDeviceAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, ref VkMemoryRequirements memoryRequirements);
        public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, ref VkMemoryRequirements memoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements[] memoryRequirements);
        public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements[] memoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, ref VkMemoryRequirements2 memoryRequirements) => vkGetBufferMemoryRequirements2(device, ref info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2[] info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2[] info, ref VkMemoryRequirements2 memoryRequirements) => vkGetBufferMemoryRequirements2(device, info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, VkMemoryRequirements2[] memoryRequirements) => vkGetBufferMemoryRequirements2(device, ref info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2[] info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2[] info, VkMemoryRequirements2[] memoryRequirements) => vkGetBufferMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, ref VkBufferDeviceAddressInfo info);
        public static void GetBufferOpaqueCaptureAddress(VkDevice device, ref VkBufferDeviceAddressInfo info) => vkGetBufferOpaqueCaptureAddress(device, ref info);
        [DllImport("vulkan-1")] private static extern ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo[] info);
        public static void GetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo[] info) => vkGetBufferOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkDescriptorSetLayoutSupport support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkDescriptorSetLayoutSupport support) => vkGetDescriptorSetLayoutSupport(device, ref createInfo, ref support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkDescriptorSetLayoutSupport support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, ref VkDescriptorSetLayoutSupport support) => vkGetDescriptorSetLayoutSupport(device, createInfo, ref support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkDescriptorSetLayoutSupport[] support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkDescriptorSetLayoutSupport[] support) => vkGetDescriptorSetLayoutSupport(device, ref createInfo, support);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkDescriptorSetLayoutSupport[] support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo[] createInfo, VkDescriptorSetLayoutSupport[] support) => vkGetDescriptorSetLayoutSupport(device, createInfo, support);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref VkPeerMemoryFeatureFlags peerMemoryFeatures);
        public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref VkPeerMemoryFeatureFlags peerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, ref peerMemoryFeatures);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags[] peerMemoryFeatures);
        public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags[] peerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeatures);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, ref VkDeviceSize committedMemoryInBytes);
        public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, ref VkDeviceSize committedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, ref committedMemoryInBytes);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize[] committedMemoryInBytes);
        public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize[] committedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, committedMemoryInBytes);
        [DllImport("vulkan-1")] private static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, ref VkDeviceMemoryOpaqueCaptureAddressInfo info);
        public static void GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, ref VkDeviceMemoryOpaqueCaptureAddressInfo info) => vkGetDeviceMemoryOpaqueCaptureAddress(device, ref info);
        [DllImport("vulkan-1")] private static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo[] info);
        public static void GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo[] info) => vkGetDeviceMemoryOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, ref VkQueue queue);
        public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, ref VkQueue queue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, ref queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue[] queue);
        public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue[] queue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, ref VkQueue queue);
        public static void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, ref VkQueue queue) => vkGetDeviceQueue2(device, ref queueInfo, ref queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2[] queueInfo, ref VkQueue queue);
        public static void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2[] queueInfo, ref VkQueue queue) => vkGetDeviceQueue2(device, queueInfo, ref queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, VkQueue[] queue);
        public static void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, VkQueue[] queue) => vkGetDeviceQueue2(device, ref queueInfo, queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2[] queueInfo, VkQueue[] queue);
        public static void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2[] queueInfo, VkQueue[] queue) => vkGetDeviceQueue2(device, queueInfo, queue);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, ref VkMemoryRequirements memoryRequirements);
        public static void GetImageMemoryRequirements(VkDevice device, VkImage image, ref VkMemoryRequirements memoryRequirements) => vkGetImageMemoryRequirements(device, image, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements[] memoryRequirements);
        public static void GetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements[] memoryRequirements) => vkGetImageMemoryRequirements(device, image, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, ref VkMemoryRequirements2 memoryRequirements) => vkGetImageMemoryRequirements2(device, ref info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2[] info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2[] info, ref VkMemoryRequirements2 memoryRequirements) => vkGetImageMemoryRequirements2(device, info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, VkMemoryRequirements2[] memoryRequirements) => vkGetImageMemoryRequirements2(device, ref info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2[] info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2[] info, VkMemoryRequirements2[] memoryRequirements) => vkGetImageMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, ref sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, ref sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, ref sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, uint[] sparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, sparseMemoryRequirementCount, ref sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, ref uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2[] info, uint[] sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, ref VkSubresourceLayout layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, ref VkSubresourceLayout layout) => vkGetImageSubresourceLayout(device, image, ref subresource, ref layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource[] subresource, ref VkSubresourceLayout layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource[] subresource, ref VkSubresourceLayout layout) => vkGetImageSubresourceLayout(device, image, subresource, ref layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, VkSubresourceLayout[] layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, VkSubresourceLayout[] layout) => vkGetImageSubresourceLayout(device, image, ref subresource, layout);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource[] subresource, VkSubresourceLayout[] layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource[] subresource, VkSubresourceLayout[] layout) => vkGetImageSubresourceLayout(device, image, subresource, layout);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, ref VkExternalBufferProperties externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, ref VkExternalBufferProperties externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, ref externalBufferInfo, ref externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, ref VkExternalBufferProperties externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, ref VkExternalBufferProperties externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, externalBufferInfo, ref externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, VkExternalBufferProperties[] externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, VkExternalBufferProperties[] externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, ref externalBufferInfo, externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, VkExternalBufferProperties[] externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo[] externalBufferInfo, VkExternalBufferProperties[] externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, externalBufferInfo, externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, ref VkExternalFenceProperties externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, ref VkExternalFenceProperties externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, ref externalFenceInfo, ref externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, ref VkExternalFenceProperties externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, ref VkExternalFenceProperties externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, externalFenceInfo, ref externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, VkExternalFenceProperties[] externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, VkExternalFenceProperties[] externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, ref externalFenceInfo, externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, VkExternalFenceProperties[] externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo[] externalFenceInfo, VkExternalFenceProperties[] externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, externalFenceInfo, externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, ref VkExternalSemaphoreProperties externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, ref VkExternalSemaphoreProperties externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, ref externalSemaphoreInfo, ref externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, ref VkExternalSemaphoreProperties externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, ref VkExternalSemaphoreProperties externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, externalSemaphoreInfo, ref externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, VkExternalSemaphoreProperties[] externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, VkExternalSemaphoreProperties[] externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, ref externalSemaphoreInfo, externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, VkExternalSemaphoreProperties[] externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo[] externalSemaphoreInfo, VkExternalSemaphoreProperties[] externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, externalSemaphoreInfo, externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceFeatures features);
        public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceFeatures features) => vkGetPhysicalDeviceFeatures(physicalDevice, ref features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures[] features);
        public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures[] features) => vkGetPhysicalDeviceFeatures(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceFeatures2 features);
        public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceFeatures2 features) => vkGetPhysicalDeviceFeatures2(physicalDevice, ref features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2[] features);
        public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2[] features) => vkGetPhysicalDeviceFeatures2(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, ref VkFormatProperties formatProperties);
        public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, ref VkFormatProperties formatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, ref formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties[] formatProperties);
        public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties[] formatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, ref VkFormatProperties2 formatProperties);
        public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, ref VkFormatProperties2 formatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, ref formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2[] formatProperties);
        public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2[] formatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, ref VkImageFormatProperties imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, ref VkImageFormatProperties imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, ref imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, ref VkImageFormatProperties2 imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, ref VkImageFormatProperties2 imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, ref imageFormatInfo, ref imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, ref VkImageFormatProperties2 imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, ref VkImageFormatProperties2 imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, imageFormatInfo, ref imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, VkImageFormatProperties2[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, VkImageFormatProperties2[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, ref imageFormatInfo, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, VkImageFormatProperties2[] imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2[] imageFormatInfo, VkImageFormatProperties2[] imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, imageFormatInfo, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceMemoryProperties memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceMemoryProperties memoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, ref memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties[] memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties[] memoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceMemoryProperties2 memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceMemoryProperties2 memoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, ref memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2[] memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2[] memoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceProperties properties);
        public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceProperties properties) => vkGetPhysicalDeviceProperties(physicalDevice, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties[] properties);
        public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties[] properties) => vkGetPhysicalDeviceProperties(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceProperties2 properties);
        public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceProperties2 properties) => vkGetPhysicalDeviceProperties2(physicalDevice, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2[] properties);
        public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2[] properties) => vkGetPhysicalDeviceProperties2(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, ref VkQueueFamilyProperties queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, ref VkQueueFamilyProperties queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, ref queueFamilyPropertyCount, ref queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, ref VkQueueFamilyProperties queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, ref VkQueueFamilyProperties queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, queueFamilyPropertyCount, ref queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, VkQueueFamilyProperties[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, VkQueueFamilyProperties[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, VkQueueFamilyProperties[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, VkQueueFamilyProperties[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, ref VkQueueFamilyProperties2 queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, ref VkQueueFamilyProperties2 queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, ref queueFamilyPropertyCount, ref queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, ref VkQueueFamilyProperties2 queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, ref VkQueueFamilyProperties2 queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, queueFamilyPropertyCount, ref queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, VkQueueFamilyProperties2[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, VkQueueFamilyProperties2[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, VkQueueFamilyProperties2[] queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint[] queueFamilyPropertyCount, VkQueueFamilyProperties2[] queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, ref VkSparseImageFormatProperties properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, ref VkSparseImageFormatProperties properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint[] propertyCount, ref VkSparseImageFormatProperties properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint[] propertyCount, ref VkSparseImageFormatProperties properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, VkSparseImageFormatProperties[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, VkSparseImageFormatProperties[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint[] propertyCount, VkSparseImageFormatProperties[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint[] propertyCount, VkSparseImageFormatProperties[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, ref VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, ref VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, ref propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, ref VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, ref VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, ref propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint[] propertyCount, ref VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint[] propertyCount, ref VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, uint[] propertyCount, ref VkSparseImageFormatProperties2 properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, uint[] propertyCount, ref VkSparseImageFormatProperties2 properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, propertyCount, ref properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, ref uint propertyCount, VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, ref propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint[] propertyCount, VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint[] propertyCount, VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, ref formatInfo, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, uint[] propertyCount, VkSparseImageFormatProperties2[] properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2[] formatInfo, uint[] propertyCount, VkSparseImageFormatProperties2[] properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ref nuint dataSize, void* data);
        public static void GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ref nuint dataSize, void* data) => vkGetPipelineCacheData(device, pipelineCache, ref dataSize, data).AssertSuccess(nameof(vkGetPipelineCacheData));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint[] dataSize, void* data);
        public static void GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint[] dataSize, void* data) => vkGetPipelineCacheData(device, pipelineCache, dataSize, data).AssertSuccess(nameof(vkGetPipelineCacheData));
        [DllImport("vulkan-1")] private static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, ref VkExtent2D granularity);
        public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, ref VkExtent2D granularity) => vkGetRenderAreaGranularity(device, renderPass, ref granularity);
        [DllImport("vulkan-1")] private static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D[] granularity);
        public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D[] granularity) => vkGetRenderAreaGranularity(device, renderPass, granularity);
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ref ulong value);
        public static void GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ref ulong value) => vkGetSemaphoreCounterValue(device, semaphore, ref value).AssertSuccess(nameof(vkGetSemaphoreCounterValue));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong[] value);
        public static void GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong[] value) => vkGetSemaphoreCounterValue(device, semaphore, value).AssertSuccess(nameof(vkGetSemaphoreCounterValue));
        [DllImport("vulkan-1")] private static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges);
        public static void InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange memoryRanges) => vkInvalidateMappedMemoryRanges(device, memoryRangeCount, ref memoryRanges).AssertSuccess(nameof(vkInvalidateMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges);
        public static void InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => vkInvalidateMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkInvalidateMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache srcCaches);
        public static void MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache srcCaches) => vkMergePipelineCaches(device, dstCache, srcCacheCount, ref srcCaches).AssertSuccess(nameof(vkMergePipelineCaches));
        [DllImport("vulkan-1")] private static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache[] srcCaches);
        public static void MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache[] srcCaches) => vkMergePipelineCaches(device, dstCache, srcCacheCount, srcCaches).AssertSuccess(nameof(vkMergePipelineCaches));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence);
        public static void QueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence) => vkQueueBindSparse(queue, bindInfoCount, ref bindInfo, fence).AssertSuccess(nameof(vkQueueBindSparse));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo[] bindInfo, VkFence fence);
        public static void QueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo[] bindInfo, VkFence fence) => vkQueueBindSparse(queue, bindInfoCount, bindInfo, fence).AssertSuccess(nameof(vkQueueBindSparse));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueSubmit(VkQueue queue, uint submitCount, ref VkSubmitInfo submits, VkFence fence);
        public static void QueueSubmit(VkQueue queue, uint submitCount, ref VkSubmitInfo submits, VkFence fence) => vkQueueSubmit(queue, submitCount, ref submits, fence).AssertSuccess(nameof(vkQueueSubmit));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo[] submits, VkFence fence);
        public static void QueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo[] submits, VkFence fence) => vkQueueSubmit(queue, submitCount, submits, fence).AssertSuccess(nameof(vkQueueSubmit));
        [DllImport("vulkan-1")] private static extern VkResult vkResetFences(VkDevice device, uint fenceCount, ref VkFence fences);
        public static void ResetFences(VkDevice device, uint fenceCount, ref VkFence fences) => vkResetFences(device, fenceCount, ref fences).AssertSuccess(nameof(vkResetFences));
        [DllImport("vulkan-1")] private static extern VkResult vkResetFences(VkDevice device, uint fenceCount, VkFence[] fences);
        public static void ResetFences(VkDevice device, uint fenceCount, VkFence[] fences) => vkResetFences(device, fenceCount, fences).AssertSuccess(nameof(vkResetFences));
        [DllImport("vulkan-1")] private static extern VkResult vkSignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo signalInfo);
        public static void SignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo signalInfo) => vkSignalSemaphore(device, ref signalInfo).AssertSuccess(nameof(vkSignalSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo[] signalInfo);
        public static void SignalSemaphore(VkDevice device, VkSemaphoreSignalInfo[] signalInfo) => vkSignalSemaphore(device, signalInfo).AssertSuccess(nameof(vkSignalSemaphore));
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, ref descriptorWrites, descriptorCopyCount, ref descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, ref descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, ref descriptorWrites, descriptorCopyCount, descriptorCopies);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
        [DllImport("vulkan-1")] private static extern VkResult vkWaitForFences(VkDevice device, uint fenceCount, ref VkFence fences, VkBool32 waitAll, ulong timeout);
        public static void WaitForFences(VkDevice device, uint fenceCount, ref VkFence fences, VkBool32 waitAll, ulong timeout) => vkWaitForFences(device, fenceCount, ref fences, waitAll, timeout).AssertSuccess(nameof(vkWaitForFences));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitForFences(VkDevice device, uint fenceCount, VkFence[] fences, VkBool32 waitAll, ulong timeout);
        public static void WaitForFences(VkDevice device, uint fenceCount, VkFence[] fences, VkBool32 waitAll, ulong timeout) => vkWaitForFences(device, fenceCount, fences, waitAll, timeout).AssertSuccess(nameof(vkWaitForFences));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout);
        public static void WaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout) => vkWaitSemaphores(device, ref waitInfo, timeout).AssertSuccess(nameof(vkWaitSemaphores));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo[] waitInfo, ulong timeout);
        public static void WaitSemaphores(VkDevice device, VkSemaphoreWaitInfo[] waitInfo, ulong timeout) => vkWaitSemaphores(device, waitInfo, timeout).AssertSuccess(nameof(vkWaitSemaphores));
    }
}