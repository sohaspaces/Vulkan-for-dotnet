using System.Runtime.InteropServices;
using Vulkan.Delegates;
using Vulkan.Enums;
using Vulkan.Handles;
using Vulkan.Structs;

namespace Vulkan
{
    public static unsafe partial class Vk
    {
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, VkCommandBuffer* commandBuffers);
        public static void AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, VkCommandBuffer* commandBuffers) => vkAllocateCommandBuffers(device, allocateInfo, commandBuffers).AssertSuccess(nameof(vkAllocateCommandBuffers));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, VkDescriptorSet* descriptorSets);
        public static void AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, VkDescriptorSet* descriptorSets) => vkAllocateDescriptorSets(device, allocateInfo, descriptorSets).AssertSuccess(nameof(vkAllocateDescriptorSets));
        [DllImport("vulkan-1")] private static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, VkDeviceMemory* memory);
        public static void AllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, VkDeviceMemory* memory) => vkAllocateMemory(device, allocateInfo, allocator, memory).AssertSuccess(nameof(vkAllocateMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo);
        public static void BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo) => vkBeginCommandBuffer(commandBuffer, beginInfo).AssertSuccess(nameof(vkBeginCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
        public static void BindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) => vkBindBufferMemory(device, buffer, memory, memoryOffset).AssertSuccess(nameof(vkBindBufferMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos);
        public static void BindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos) => vkBindBufferMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindBufferMemory2));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
        public static void BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) => vkBindImageMemory(device, image, memory, memoryOffset).AssertSuccess(nameof(vkBindImageMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos);
        public static void BindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos) => vkBindImageMemory2(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindImageMemory2));
        [DllImport("vulkan-1")] private static extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);
        public static void CmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags) => vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents);
        public static void CmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents) => vkCmdBeginRenderPass(commandBuffer, renderPassBegin, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo);
        public static void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo) => vkCmdBeginRenderPass2(commandBuffer, renderPassBegin, subpassBeginInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets);
        public static void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets) => vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
        public static void CmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) => vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
        [DllImport("vulkan-1")] private static extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
        public static void CmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) => vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
        [DllImport("vulkan-1")] private static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets);
        public static void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets) => vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, buffers, offsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* regions, VkFilter filter);
        public static void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* regions, VkFilter filter) => vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions, filter);
        [DllImport("vulkan-1")] private static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* attachments, uint rectCount, VkClearRect* rects);
        public static void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* attachments, uint rectCount, VkClearRect* rects) => vkCmdClearAttachments(commandBuffer, attachmentCount, attachments, rectCount, rects);
        [DllImport("vulkan-1")] private static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange* ranges);
        public static void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange* ranges) => vkCmdClearColorImage(commandBuffer, image, imageLayout, color, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange* ranges);
        public static void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange* ranges) => vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* regions);
        public static void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* regions) => vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* regions);
        public static void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* regions) => vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* regions);
        public static void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* regions) => vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* regions);
        public static void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* regions) => vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
        public static void CmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) => vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
        [DllImport("vulkan-1")] private static extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
        public static void CmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) => vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
        [DllImport("vulkan-1")] private static extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
        public static void CmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ) => vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        [DllImport("vulkan-1")] private static extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
        public static void CmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => vkCmdDispatchIndirect(commandBuffer, buffer, offset);
        [DllImport("vulkan-1")] private static extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        public static void CmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance) => vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
        public static void CmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance) => vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
        public static void CmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        public static void CmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
        public static void CmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        public static void CmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);
        public static void CmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query) => vkCmdEndQuery(commandBuffer, queryPool, query);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer);
        public static void CmdEndRenderPass(VkCommandBuffer commandBuffer) => vkCmdEndRenderPass(commandBuffer);
        [DllImport("vulkan-1")] private static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo);
        public static void CmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo) => vkCmdEndRenderPass2(commandBuffer, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* commandBuffers);
        public static void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* commandBuffers) => vkCmdExecuteCommands(commandBuffer, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data);
        public static void CmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data) => vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);
        public static void CmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) => vkCmdNextSubpass(commandBuffer, contents);
        [DllImport("vulkan-1")] private static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo);
        public static void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo) => vkCmdNextSubpass2(commandBuffer, subpassBeginInfo, subpassEndInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers);
        public static void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers) => vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values);
        public static void CmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values) => vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, values);
        [DllImport("vulkan-1")] private static extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask);
        public static void CmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => vkCmdResetEvent(commandBuffer, @event, stageMask);
        [DllImport("vulkan-1")] private static extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);
        public static void CmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount) => vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
        [DllImport("vulkan-1")] private static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* regions);
        public static void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* regions) => vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
        [DllImport("vulkan-1")] private static extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, (float, float, float, float) blendConstants);
        public static void CmdSetBlendConstants(VkCommandBuffer commandBuffer, (float, float, float, float) blendConstants) => vkCmdSetBlendConstants(commandBuffer, blendConstants);
        [DllImport("vulkan-1")] private static extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
        public static void CmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) => vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
        [DllImport("vulkan-1")] private static extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
        public static void CmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) => vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
        [DllImport("vulkan-1")] private static extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask);
        public static void CmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask) => vkCmdSetDeviceMask(commandBuffer, deviceMask);
        [DllImport("vulkan-1")] private static extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask);
        public static void CmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => vkCmdSetEvent(commandBuffer, @event, stageMask);
        [DllImport("vulkan-1")] private static extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
        public static void CmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) => vkCmdSetLineWidth(commandBuffer, lineWidth);
        [DllImport("vulkan-1")] private static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* scissors);
        public static void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* scissors) => vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, scissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);
        public static void CmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask) => vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
        [DllImport("vulkan-1")] private static extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);
        public static void CmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference) => vkCmdSetStencilReference(commandBuffer, faceMask, reference);
        [DllImport("vulkan-1")] private static extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);
        public static void CmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask) => vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* viewports);
        public static void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* viewports) => vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, viewports);
        [DllImport("vulkan-1")] private static extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* data);
        public static void CmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* data) => vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, data);
        [DllImport("vulkan-1")] private static extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint @eventCount, VkEvent* @events, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers);
        public static void CmdWaitEvents(VkCommandBuffer commandBuffer, uint @eventCount, VkEvent* @events, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers) => vkCmdWaitEvents(commandBuffer, @eventCount, @events, srcStageMask, dstStageMask, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
        [DllImport("vulkan-1")] private static extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query);
        public static void CmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query) => vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBuffer* buffer);
        public static void CreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBuffer* buffer) => vkCreateBuffer(device, createInfo, allocator, buffer).AssertSuccess(nameof(vkCreateBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBufferView* view);
        public static void CreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBufferView* view) => vkCreateBufferView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateBufferView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkCommandPool* commandPool);
        public static void CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkCommandPool* commandPool) => vkCreateCommandPool(device, createInfo, allocator, commandPool).AssertSuccess(nameof(vkCreateCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines);
        public static void CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines) => vkCreateComputePipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateComputePipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorPool* descriptorPool);
        public static void CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorPool* descriptorPool) => vkCreateDescriptorPool(device, createInfo, allocator, descriptorPool).AssertSuccess(nameof(vkCreateDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorSetLayout* setLayout);
        public static void CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorSetLayout* setLayout) => vkCreateDescriptorSetLayout(device, createInfo, allocator, setLayout).AssertSuccess(nameof(vkCreateDescriptorSetLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate);
        public static void CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate) => vkCreateDescriptorUpdateTemplate(device, createInfo, allocator, descriptorUpdateTemplate).AssertSuccess(nameof(vkCreateDescriptorUpdateTemplate));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDevice* device);
        public static void CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDevice* device) => vkCreateDevice(physicalDevice, createInfo, allocator, device).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkEvent* @event);
        public static void CreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkEvent* @event) => vkCreateEvent(device, createInfo, allocator, @event).AssertSuccess(nameof(vkCreateDevice));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFence* fence);
        public static void CreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFence* fence) => vkCreateFence(device, createInfo, allocator, fence).AssertSuccess(nameof(vkCreateFence));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFramebuffer* framebuffer);
        public static void CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFramebuffer* framebuffer) => vkCreateFramebuffer(device, createInfo, allocator, framebuffer).AssertSuccess(nameof(vkCreateFramebuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines);
        public static void CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines) => vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateGraphicsPipelines));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImage* image);
        public static void CreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImage* image) => vkCreateImage(device, createInfo, allocator, image).AssertSuccess(nameof(vkCreateImage));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImageView* view);
        public static void CreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImageView* view) => vkCreateImageView(device, createInfo, allocator, view).AssertSuccess(nameof(vkCreateImageView));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateInstance(VkInstanceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkInstance* instance);
        public static void CreateInstance(VkInstanceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkInstance* instance) => vkCreateInstance(createInfo, allocator, instance).AssertSuccess(nameof(vkCreateInstance));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineCache* pipelineCache);
        public static void CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineCache* pipelineCache) => vkCreatePipelineCache(device, createInfo, allocator, pipelineCache).AssertSuccess(nameof(vkCreatePipelineCache));
        [DllImport("vulkan-1")] private static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineLayout* pipelineLayout);
        public static void CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineLayout* pipelineLayout) => vkCreatePipelineLayout(device, createInfo, allocator, pipelineLayout).AssertSuccess(nameof(vkCreatePipelineLayout));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkQueryPool* queryPool);
        public static void CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkQueryPool* queryPool) => vkCreateQueryPool(device, createInfo, allocator, queryPool).AssertSuccess(nameof(vkCreateQueryPool));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass);
        public static void CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass) => vkCreateRenderPass(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass);
        public static void CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass) => vkCreateRenderPass2(device, createInfo, allocator, renderPass).AssertSuccess(nameof(vkCreateRenderPass2));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSampler* sampler);
        public static void CreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSampler* sampler) => vkCreateSampler(device, createInfo, allocator, sampler).AssertSuccess(nameof(vkCreateSampler));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion);
        public static void CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion) => vkCreateSamplerYcbcrConversion(device, createInfo, allocator, ycbcrConversion).AssertSuccess(nameof(vkCreateSamplerYcbcrConversion));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSemaphore* semaphore);
        public static void CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSemaphore* semaphore) => vkCreateSemaphore(device, createInfo, allocator, semaphore).AssertSuccess(nameof(vkCreateSemaphore));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkShaderModule* shaderModule);
        public static void CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkShaderModule* shaderModule) => vkCreateShaderModule(device, createInfo, allocator, shaderModule).AssertSuccess(nameof(vkCreateShaderModule));
        [DllImport("vulkan-1")] private static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator);
        public static void DestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator) => vkDestroyBuffer(device, buffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator);
        public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator) => vkDestroyBufferView(device, bufferView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator);
        public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator) => vkDestroyCommandPool(device, commandPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator);
        public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator) => vkDestroyDescriptorPool(device, descriptorPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator);
        public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator) => vkDestroyDescriptorSetLayout(device, descriptorSetLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator);
        public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator) => vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* allocator);
        public static void DestroyDevice(VkDevice device, VkAllocationCallbacks* allocator) => vkDestroyDevice(device, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator);
        public static void DestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator) => vkDestroyEvent(device, @event, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator);
        public static void DestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator) => vkDestroyFence(device, fence, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator);
        public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator) => vkDestroyFramebuffer(device, framebuffer, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator);
        public static void DestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator) => vkDestroyImage(device, image, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator);
        public static void DestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator) => vkDestroyImageView(device, imageView, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator);
        public static void DestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator) => vkDestroyInstance(instance, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator);
        public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator) => vkDestroyPipeline(device, pipeline, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator);
        public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator) => vkDestroyPipelineCache(device, pipelineCache, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator);
        public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator) => vkDestroyPipelineLayout(device, pipelineLayout, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator);
        public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator) => vkDestroyQueryPool(device, queryPool, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator);
        public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator) => vkDestroyRenderPass(device, renderPass, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator);
        public static void DestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator) => vkDestroySampler(device, sampler, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator);
        public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator) => vkDestroySamplerYcbcrConversion(device, ycbcrConversion, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator);
        public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator) => vkDestroySemaphore(device, semaphore, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator);
        public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator) => vkDestroyShaderModule(device, shaderModule, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkDeviceWaitIdle(VkDevice device);
        public static void DeviceWaitIdle(VkDevice device) => vkDeviceWaitIdle(device).AssertSuccess(nameof(vkDeviceWaitIdle));
        [DllImport("vulkan-1")] private static extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer);
        public static void EndCommandBuffer(VkCommandBuffer commandBuffer) => vkEndCommandBuffer(commandBuffer).AssertSuccess(nameof(vkEndCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint* propertyCount, VkExtensionProperties* properties);
        public static void EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint* propertyCount, VkExtensionProperties* properties) => vkEnumerateDeviceExtensionProperties(physicalDevice, layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, VkLayerProperties* properties);
        public static void EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, VkLayerProperties* properties) => vkEnumerateDeviceLayerProperties(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkEnumerateDeviceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceExtensionProperties(string layerName, uint* propertyCount, VkExtensionProperties* properties);
        public static void EnumerateInstanceExtensionProperties(string layerName, uint* propertyCount, VkExtensionProperties* properties) => vkEnumerateInstanceExtensionProperties(layerName, propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceExtensionProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceLayerProperties(uint* propertyCount, VkLayerProperties* properties);
        public static void EnumerateInstanceLayerProperties(uint* propertyCount, VkLayerProperties* properties) => vkEnumerateInstanceLayerProperties(propertyCount, properties).AssertSuccess(nameof(vkEnumerateInstanceLayerProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumerateInstanceVersion(uint* apiVersion);
        public static void EnumerateInstanceVersion(uint* apiVersion) => vkEnumerateInstanceVersion(apiVersion).AssertSuccess(nameof(vkEnumerateInstanceVersion));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties);
        public static void EnumeratePhysicalDeviceGroups(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties) => vkEnumeratePhysicalDeviceGroups(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties).AssertSuccess(nameof(vkEnumeratePhysicalDeviceGroups));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, VkPhysicalDevice* physicalDevices);
        public static void EnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, VkPhysicalDevice* physicalDevices) => vkEnumeratePhysicalDevices(instance, physicalDeviceCount, physicalDevices).AssertSuccess(nameof(vkEnumeratePhysicalDevices));
        [DllImport("vulkan-1")] private static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges);
        public static void FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges) => vkFlushMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkFlushMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* commandBuffers);
        public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* commandBuffers) => vkFreeCommandBuffers(device, commandPool, commandBufferCount, commandBuffers);
        [DllImport("vulkan-1")] private static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* descriptorSets);
        public static void FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* descriptorSets) => vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, descriptorSets).AssertSuccess(nameof(vkFreeDescriptorSets));
        [DllImport("vulkan-1")] private static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator);
        public static void FreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator) => vkFreeMemory(device, memory, allocator);
        [DllImport("vulkan-1")] private static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* info);
        public static VkDeviceAddress GetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* info) => vkGetBufferDeviceAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* memoryRequirements);
        public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* memoryRequirements) => vkGetBufferMemoryRequirements(device, buffer, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements);
        public static void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements) => vkGetBufferMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* info);
        public static ulong GetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* info) => vkGetBufferOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayoutSupport* support);
        public static void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayoutSupport* support) => vkGetDescriptorSetLayoutSupport(device, createInfo, support);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* peerMemoryFeatures);
        public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* peerMemoryFeatures) => vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeatures);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* committedMemoryInBytes);
        public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* committedMemoryInBytes) => vkGetDeviceMemoryCommitment(device, memory, committedMemoryInBytes);
        [DllImport("vulkan-1")] private static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info);
        public static ulong GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info) => vkGetDeviceMemoryOpaqueCaptureAddress(device, info);
        [DllImport("vulkan-1")] private static extern VkVoidFunction vkGetDeviceProcAddr(VkDevice device, string name);
        public static VkVoidFunction GetDeviceProcAddr(VkDevice device, string name) => vkGetDeviceProcAddr(device, name);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* queue);
        public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* queue) => vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, queue);
        [DllImport("vulkan-1")] private static extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, VkQueue* queue);
        public static void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, VkQueue* queue) => vkGetDeviceQueue2(device, queueInfo, queue);
        [DllImport("vulkan-1")] private static extern VkResult vkGetEventStatus(VkDevice device, VkEvent @event);
        public static void GetEventStatus(VkDevice device, VkEvent @event) => vkGetEventStatus(device, @event).AssertSuccess(nameof(vkGetEventStatus));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence);
        public static void GetFenceStatus(VkDevice device, VkFence fence) => vkGetFenceStatus(device, fence).AssertSuccess(nameof(vkGetFenceStatus));
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* memoryRequirements);
        public static void GetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* memoryRequirements) => vkGetImageMemoryRequirements(device, image, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements);
        public static void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements) => vkGetImageMemoryRequirements2(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements* sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements* sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements);
        public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements) => vkGetImageSparseMemoryRequirements2(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, VkSubresourceLayout* layout);
        public static void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, VkSubresourceLayout* layout) => vkGetImageSubresourceLayout(device, image, subresource, layout);
        [DllImport("vulkan-1")] private static extern VkVoidFunction vkGetInstanceProcAddr(VkInstance instance, string name);
        public static VkVoidFunction GetInstanceProcAddr(VkInstance instance, string name) => vkGetInstanceProcAddr(instance, name);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, VkExternalBufferProperties* externalBufferProperties);
        public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, VkExternalBufferProperties* externalBufferProperties) => vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, externalBufferInfo, externalBufferProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, VkExternalFenceProperties* externalFenceProperties);
        public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, VkExternalFenceProperties* externalFenceProperties) => vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, externalFenceInfo, externalFenceProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, VkExternalSemaphoreProperties* externalSemaphoreProperties);
        public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, VkExternalSemaphoreProperties* externalSemaphoreProperties) => vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, externalSemaphoreInfo, externalSemaphoreProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* features);
        public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* features) => vkGetPhysicalDeviceFeatures(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* features);
        public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* features) => vkGetPhysicalDeviceFeatures2(physicalDevice, features);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* formatProperties);
        public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* formatProperties) => vkGetPhysicalDeviceFormatProperties(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* formatProperties);
        public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* formatProperties) => vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, formatProperties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, VkImageFormatProperties2* imageFormatProperties);
        public static void GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, VkImageFormatProperties2* imageFormatProperties) => vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, imageFormatInfo, imageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceImageFormatProperties2));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* memoryProperties) => vkGetPhysicalDeviceMemoryProperties(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* memoryProperties);
        public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* memoryProperties) => vkGetPhysicalDeviceMemoryProperties2(physicalDevice, memoryProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* properties);
        public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* properties) => vkGetPhysicalDeviceProperties(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* properties);
        public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* properties) => vkGetPhysicalDeviceProperties2(physicalDevice, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties* queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties* queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties);
        public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties) => vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, VkSparseImageFormatProperties* properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, VkSparseImageFormatProperties* properties) => vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties);
        public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties) => vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, formatInfo, propertyCount, properties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* dataSize, void* data);
        public static void GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* dataSize, void* data) => vkGetPipelineCacheData(device, pipelineCache, dataSize, data).AssertSuccess(nameof(vkGetPipelineCacheData));
        [DllImport("vulkan-1")] private static extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* data, VkDeviceSize stride, VkQueryResultFlags flags);
        public static void GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* data, VkDeviceSize stride, VkQueryResultFlags flags) => vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, data, stride, flags).AssertSuccess(nameof(vkGetQueryPoolResults));
        [DllImport("vulkan-1")] private static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* granularity);
        public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* granularity) => vkGetRenderAreaGranularity(device, renderPass, granularity);
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* value);
        public static void GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* value) => vkGetSemaphoreCounterValue(device, semaphore, value).AssertSuccess(nameof(vkGetSemaphoreCounterValue));
        [DllImport("vulkan-1")] private static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges);
        public static void InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges) => vkInvalidateMappedMemoryRanges(device, memoryRangeCount, memoryRanges).AssertSuccess(nameof(vkInvalidateMappedMemoryRanges));
        [DllImport("vulkan-1")] private static extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
        public static void MapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) => vkMapMemory(device, memory, offset, size, flags, ppData).AssertSuccess(nameof(vkMapMemory));
        [DllImport("vulkan-1")] private static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* srcCaches);
        public static void MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* srcCaches) => vkMergePipelineCaches(device, dstCache, srcCacheCount, srcCaches).AssertSuccess(nameof(vkMergePipelineCaches));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence);
        public static void QueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence) => vkQueueBindSparse(queue, bindInfoCount, bindInfo, fence).AssertSuccess(nameof(vkQueueBindSparse));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* submits, VkFence fence);
        public static void QueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* submits, VkFence fence) => vkQueueSubmit(queue, submitCount, submits, fence).AssertSuccess(nameof(vkQueueSubmit));
        [DllImport("vulkan-1")] private static extern VkResult vkQueueWaitIdle(VkQueue queue);
        public static void QueueWaitIdle(VkQueue queue) => vkQueueWaitIdle(queue).AssertSuccess(nameof(vkQueueWaitIdle));
        [DllImport("vulkan-1")] private static extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
        public static void ResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) => vkResetCommandBuffer(commandBuffer, flags).AssertSuccess(nameof(vkResetCommandBuffer));
        [DllImport("vulkan-1")] private static extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
        public static void ResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) => vkResetCommandPool(device, commandPool, flags).AssertSuccess(nameof(vkResetCommandPool));
        [DllImport("vulkan-1")] private static extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
        public static void ResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) => vkResetDescriptorPool(device, descriptorPool, flags).AssertSuccess(nameof(vkResetDescriptorPool));
        [DllImport("vulkan-1")] private static extern VkResult vkResetEvent(VkDevice device, VkEvent @event);
        public static VkResult ResetEvent(VkDevice device, VkEvent @event) => vkResetEvent(device, @event);
        [DllImport("vulkan-1")] private static extern VkResult vkResetFences(VkDevice device, uint fenceCount, VkFence* fences);
        public static void ResetFences(VkDevice device, uint fenceCount, VkFence* fences) => vkResetFences(device, fenceCount, fences).AssertSuccess(nameof(vkResetFences));
        [DllImport("vulkan-1")] private static extern void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount);
        public static void ResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount) => vkResetQueryPool(device, queryPool, firstQuery, queryCount);
        [DllImport("vulkan-1")] private static extern VkResult vkSetEvent(VkDevice device, VkEvent @event);
        public static VkResult SetEvent(VkDevice device, VkEvent @event) => vkSetEvent(device, @event);
        [DllImport("vulkan-1")] private static extern VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* signalInfo);
        public static void SignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* signalInfo) => vkSignalSemaphore(device, signalInfo).AssertSuccess(nameof(vkSignalSemaphore));
        [DllImport("vulkan-1")] private static extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
        public static void TrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) => vkTrimCommandPool(device, commandPool, flags);
        [DllImport("vulkan-1")] private static extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory);
        public static void UnmapMemory(VkDevice device, VkDeviceMemory memory) => vkUnmapMemory(device, memory);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data);
        public static void UpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data) => vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, data);
        [DllImport("vulkan-1")] private static extern void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* descriptorCopies);
        public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* descriptorCopies) => vkUpdateDescriptorSets(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
        [DllImport("vulkan-1")] private static extern VkResult vkWaitForFences(VkDevice device, uint fenceCount, VkFence* fences, VkBool32 waitAll, ulong timeout);
        public static void WaitForFences(VkDevice device, uint fenceCount, VkFence* fences, VkBool32 waitAll, ulong timeout) => vkWaitForFences(device, fenceCount, fences, waitAll, timeout).AssertSuccess(nameof(vkWaitForFences));
        [DllImport("vulkan-1")] private static extern VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout);
        public static void WaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout) => vkWaitSemaphores(device, waitInfo, timeout).AssertSuccess(nameof(vkWaitSemaphores));

        //paste here
    }
}