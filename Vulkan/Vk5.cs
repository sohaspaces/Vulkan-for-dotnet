using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Enums.Nvidia;
using Vulkan.Handles;
using Vulkan.Handles.Nvidia;
using Vulkan.Structs;
using Vulkan.Structs.Nvidia;
namespace Vulkan
{
    public static unsafe partial class VkNv
    {
        [DllImport("vulkan-1")] private static extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfo* bindInfos);
        public static void BindAccelerationStructureMemory(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfo* bindInfos) => vkBindAccelerationStructureMemoryNV(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindAccelerationStructureMemoryNV));
        [DllImport("vulkan-1")] private static extern void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
        public static void CmdBindShadingRateImage(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) => vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
        [DllImport("vulkan-1")] private static extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfo* info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset);
        public static void CmdBuildAccelerationStructure(VkCommandBuffer commandBuffer, VkAccelerationStructureInfo* info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset) => vkCmdBuildAccelerationStructureNV(commandBuffer, info, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        [DllImport("vulkan-1")] private static extern void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructure dst, VkAccelerationStructure src, VkCopyAccelerationStructureMode mode);
        public static void CmdCopyAccelerationStructure(VkCommandBuffer commandBuffer, VkAccelerationStructure dst, VkAccelerationStructure src, VkCopyAccelerationStructureMode mode) => vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        public static void CmdDrawMeshTasksIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
        public static void CmdDrawMeshTasksIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
        [DllImport("vulkan-1")] private static extern void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask);
        public static void CmdDrawMeshTasks(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask) => vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
        [DllImport("vulkan-1")] private static extern void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* checkpointMarker);
        public static void CmdSetCheckpoint(VkCommandBuffer commandBuffer, void* checkpointMarker) => vkCmdSetCheckpointNV(commandBuffer, checkpointMarker);
        [DllImport("vulkan-1")] private static extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustom* customSampleOrders);
        public static void CmdSetCoarseSampleOrder(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustom* customSampleOrders) => vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, customSampleOrders);
        [DllImport("vulkan-1")] private static extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* exclusiveScissors);
        public static void CmdSetExclusiveScissor(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* exclusiveScissors) => vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, exclusiveScissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePalette* shadingRatePalettes);
        public static void CmdSetViewportShadingRatePalette(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePalette* shadingRatePalettes) => vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, shadingRatePalettes);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScaling* viewportWScalings);
        public static void CmdSetViewportWScaling(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScaling* viewportWScalings) => vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, viewportWScalings);
        [DllImport("vulkan-1")] private static extern void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth);
        public static void CmdTraceRays(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth) => vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
        [DllImport("vulkan-1")] private static extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructure* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery);
        public static void CmdWriteAccelerationStructuresProperties(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructure* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
        [DllImport("vulkan-1")] private static extern VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint shader);
        public static void CompileDeferred(VkDevice device, VkPipeline pipeline, uint shader) => vkCompileDeferredNV(device, pipeline, shader).AssertSuccess(nameof(vkCompileDeferredNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructure* accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, VkAccelerationStructureCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructure* accelerationStructure) => vkCreateAccelerationStructureNV(device, createInfo, allocator, accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructure accelerationStructure, VkAllocationCallbacks* allocator);
        public static void DestroyAccelerationStructure(VkDevice device, VkAccelerationStructure accelerationStructure, VkAllocationCallbacks* allocator) => vkDestroyAccelerationStructureNV(device, accelerationStructure, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructure accelerationStructure, nuint dataSize, void* data);
        public static void GetAccelerationStructureHandle(VkDevice device, VkAccelerationStructure accelerationStructure, nuint dataSize, void* data) => vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, data).AssertSuccess(nameof(vkGetAccelerationStructureHandleNV));
        [DllImport("vulkan-1")] private static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo* info, VkMemoryRequirements2* memoryRequirements);
        public static void GetAccelerationStructureMemoryRequirements(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo* info, VkMemoryRequirements2* memoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlags handleType, nint handle);
        public static void GetMemoryWin32Handle(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlags handleType, nint handle) => vkGetMemoryWin32HandleNV(device, memory, handleType, handle).AssertSuccess(nameof(vkGetMemoryWin32HandleNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixProperties* properties);
        public static void GetPhysicalDeviceCooperativeMatrixProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixProperties* properties) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlags externalHandleType, Structs.Nvidia.VkExternalImageFormatProperties* externalImageFormatProperties);
        public static void GetPhysicalDeviceExternalImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlags externalHandleType, Structs.Nvidia.VkExternalImageFormatProperties* externalImageFormatProperties) => vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, externalImageFormatProperties).AssertSuccess(nameof(vkGetPhysicalDeviceExternalImageFormatPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint* combinationCount, VkFramebufferMixedSamplesCombination* combinations);
        public static void GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinations(VkPhysicalDevice physicalDevice, uint* combinationCount, VkFramebufferMixedSamplesCombination* combinations) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, combinationCount, combinations).AssertSuccess(nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
        [DllImport("vulkan-1")] private static extern void vkGetQueueCheckpointDataNV(VkQueue queue, uint* checkpointDataCount, VkCheckpointData* checkpointData);
        public static void GetQueueCheckpointData(VkQueue queue, uint* checkpointDataCount, VkCheckpointData* checkpointData) => vkGetQueueCheckpointDataNV(queue, checkpointDataCount, checkpointData);
        [DllImport("vulkan-1")] private static extern VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* data);
        public static void GetRayTracingShaderGroupHandles(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* data) => vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, data).AssertSuccess(nameof(vkGetRayTracingShaderGroupHandlesNV));

        //paste here



    }
}