using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Enums.Khronos;
using Vulkan.Handles;
using Vulkan.Handles.Khronos;
using Vulkan.Structs;
using Vulkan.Structs.Khronos;
namespace Vulkan
{
    public static unsafe partial class VkKhr
    {
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, ref uint imageIndex);
        public static void AcquireNextImage2(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, ref uint imageIndex) => vkAcquireNextImage2KHR(device, ref acquireInfo, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, [In, Out]VkAcquireNextImageInfo[] acquireInfo, ref uint imageIndex);
        public static void AcquireNextImage2(VkDevice device, [In, Out]VkAcquireNextImageInfo[] acquireInfo, ref uint imageIndex) => vkAcquireNextImage2KHR(device, acquireInfo, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, [In, Out]uint[] imageIndex);
        public static void AcquireNextImage2(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, [In, Out]uint[] imageIndex) => vkAcquireNextImage2KHR(device, ref acquireInfo, imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, [In, Out]VkAcquireNextImageInfo[] acquireInfo, [In, Out]uint[] imageIndex);
        public static void AcquireNextImage2(VkDevice device, [In, Out]VkAcquireNextImageInfo[] acquireInfo, [In, Out]uint[] imageIndex) => vkAcquireNextImage2KHR(device, acquireInfo, imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, ref uint imageIndex);
        public static void AcquireNextImage(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, ref uint imageIndex) => vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImageKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, [In, Out]uint[] imageIndex);
        public static void AcquireNextImage(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, [In, Out]uint[] imageIndex) => vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, imageIndex).AssertSuccess(nameof(vkAcquireNextImageKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireProfilingLockKHR(VkDevice device, ref VkAcquireProfilingLockInfo info);
        public static void AcquireProfilingLock(VkDevice device, ref VkAcquireProfilingLockInfo info) => vkAcquireProfilingLockKHR(device, ref info).AssertSuccess(nameof(vkAcquireProfilingLockKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireProfilingLockKHR(VkDevice device, [In, Out]VkAcquireProfilingLockInfo[] info);
        public static void AcquireProfilingLock(VkDevice device, [In, Out]VkAcquireProfilingLockInfo[] info) => vkAcquireProfilingLockKHR(device, info).AssertSuccess(nameof(vkAcquireProfilingLockKHR));
        [DllImport("vulkan-1")] private static extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites);
        public static void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites) => vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, ref descriptorWrites);
        [DllImport("vulkan-1")] private static extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites);
        public static void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, [In, Out]VkWriteDescriptorSet[] descriptorWrites) => vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, [In, Out]VkAndroidSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, ref allocator, out mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, ref allocator, out mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, allocator, out mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, allocator, out mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, ref allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, ref allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]VkDisplayModeCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, [In, Out]VkDisplaySurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, out VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, ref allocator, out swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, ref allocator, out swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, allocator, out swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, allocator, out swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, ref allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, ref allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, [In, Out]VkSwapchainCreateInfo[] createInfos, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSwapchain swapchain) => vkCreateSwapchainKHR(device, ref createInfo, ref allocator, out swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSwapchain swapchain) => vkCreateSwapchainKHR(device, createInfo, ref allocator, out swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchain) => vkCreateSwapchainKHR(device, ref createInfo, allocator, out swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSwapchain swapchain) => vkCreateSwapchainKHR(device, createInfo, allocator, out swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, ref createInfo, ref allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, createInfo, ref allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, ref createInfo, allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, [In, Out]VkSwapchainCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, createInfo, allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, [In, Out]VkWaylandSurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, out VkSurface surface) => vkCreateWin32SurfaceKHR(instance, createInfo, ref allocator, out surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, out VkSurface surface) => vkCreateWin32SurfaceKHR(instance, createInfo, allocator, out surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, [In, Out]VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, [In, Out]VkWin32SurfaceCreateInfo[] createInfo, [In, Out]VkAllocationCallbacks[] allocator, [In, Out]VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern void vkDestroySurfaceKHR(VkInstance instance, VkSurface surface, ref VkAllocationCallbacks allocator);
        public static void DestroySurface(VkInstance instance, VkSurface surface, ref VkAllocationCallbacks allocator) => vkDestroySurfaceKHR(instance, surface, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySurfaceKHR(VkInstance instance, VkSurface surface, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroySurface(VkInstance instance, VkSurface surface, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroySurfaceKHR(instance, surface, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchain swapchain, ref VkAllocationCallbacks allocator);
        public static void DestroySwapchain(VkDevice device, VkSwapchain swapchain, ref VkAllocationCallbacks allocator) => vkDestroySwapchainKHR(device, swapchain, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchain swapchain, [In, Out]VkAllocationCallbacks[] allocator);
        public static void DestroySwapchain(VkDevice device, VkSwapchain swapchain, [In, Out]VkAllocationCallbacks[] allocator) => vkDestroySwapchainKHR(device, swapchain, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, ref counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, ref counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, [In, Out]VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, [In, Out]VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, [In, Out]VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, [In, Out]VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, ref counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, ref VkPerformanceCounter counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, ref VkPerformanceCounter counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, ref counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, [In, Out]VkPerformanceCounter[] counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, [In, Out]VkPerformanceCounter[] counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, [In, Out]VkPerformanceCounter[] counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, [In, Out]uint[] counterCount, [In, Out]VkPerformanceCounter[] counters, [In, Out]VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, out VkDeviceGroupPresentCapabilities deviceGroupPresentCapabilities);
        public static void GetDeviceGroupPresentCapabilities(VkDevice device, out VkDeviceGroupPresentCapabilities deviceGroupPresentCapabilities) => vkGetDeviceGroupPresentCapabilitiesKHR(device, out deviceGroupPresentCapabilities).AssertSuccess(nameof(vkGetDeviceGroupPresentCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, [In, Out]VkDeviceGroupPresentCapabilities[] deviceGroupPresentCapabilities);
        public static void GetDeviceGroupPresentCapabilities(VkDevice device, [In, Out]VkDeviceGroupPresentCapabilities[] deviceGroupPresentCapabilities) => vkGetDeviceGroupPresentCapabilitiesKHR(device, deviceGroupPresentCapabilities).AssertSuccess(nameof(vkGetDeviceGroupPresentCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurface surface, out VkDeviceGroupPresentModeFlags modes);
        public static void GetDeviceGroupSurfacePresentModes(VkDevice device, VkSurface surface, out VkDeviceGroupPresentModeFlags modes) => vkGetDeviceGroupSurfacePresentModesKHR(device, surface, out modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurface surface, [In, Out]VkDeviceGroupPresentModeFlags[] modes);
        public static void GetDeviceGroupSurfacePresentModes(VkDevice device, VkSurface surface, [In, Out]VkDeviceGroupPresentModeFlags[] modes) => vkGetDeviceGroupSurfacePresentModesKHR(device, surface, modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, out VkDisplayModeProperties2 properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, out VkDisplayModeProperties2 properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, ref propertyCount, out properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, out VkDisplayModeProperties2 properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, out VkDisplayModeProperties2 properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, propertyCount, out properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, [In, Out]VkDisplayModeProperties2[] properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, [In, Out]VkDisplayModeProperties2[] properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, ref propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, [In, Out]VkDisplayModeProperties2[] properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, [In, Out]VkDisplayModeProperties2[] properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, out VkDisplayModeProperties properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, out VkDisplayModeProperties properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, ref propertyCount, out properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, out VkDisplayModeProperties properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, out VkDisplayModeProperties properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, propertyCount, out properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, [In, Out]VkDisplayModeProperties[] properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, [In, Out]VkDisplayModeProperties[] properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, ref propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, [In, Out]VkDisplayModeProperties[] properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, [In, Out]uint[] propertyCount, [In, Out]VkDisplayModeProperties[] properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, out VkDisplayPlaneCapabilities2 capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, out VkDisplayPlaneCapabilities2 capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, ref displayPlaneInfo, out capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkDisplayPlaneInfo2[] displayPlaneInfo, out VkDisplayPlaneCapabilities2 capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, [In, Out]VkDisplayPlaneInfo2[] displayPlaneInfo, out VkDisplayPlaneCapabilities2 capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, displayPlaneInfo, out capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, [In, Out]VkDisplayPlaneCapabilities2[] capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, [In, Out]VkDisplayPlaneCapabilities2[] capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, ref displayPlaneInfo, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkDisplayPlaneInfo2[] displayPlaneInfo, [In, Out]VkDisplayPlaneCapabilities2[] capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, [In, Out]VkDisplayPlaneInfo2[] displayPlaneInfo, [In, Out]VkDisplayPlaneCapabilities2[] capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, displayPlaneInfo, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, out VkDisplayPlaneCapabilities capabilities);
        public static void GetDisplayPlaneCapabilities(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, out VkDisplayPlaneCapabilities capabilities) => vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, out capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, [In, Out]VkDisplayPlaneCapabilities[] capabilities);
        public static void GetDisplayPlaneCapabilities(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, [In, Out]VkDisplayPlaneCapabilities[] capabilities) => vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, out VkDisplay displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, out VkDisplay displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, ref displayCount, out displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, [In, Out]uint[] displayCount, out VkDisplay displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, [In, Out]uint[] displayCount, out VkDisplay displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, displayCount, out displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, [In, Out]VkDisplay[] displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, [In, Out]VkDisplay[] displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, ref displayCount, displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, [In, Out]uint[] displayCount, [In, Out]VkDisplay[] displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, [In, Out]uint[] displayCount, [In, Out]VkDisplay[] displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, displayCount, displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, ref VkFenceGetFdInfo getFdInfo, out int fd);
        public static void GetFenceFd(VkDevice device, ref VkFenceGetFdInfo getFdInfo, out int fd) => vkGetFenceFdKHR(device, ref getFdInfo, out fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, [In, Out]VkFenceGetFdInfo[] getFdInfo, out int fd);
        public static void GetFenceFd(VkDevice device, [In, Out]VkFenceGetFdInfo[] getFdInfo, out int fd) => vkGetFenceFdKHR(device, getFdInfo, out fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, ref VkFenceGetFdInfo getFdInfo, [In, Out]int[] fd);
        public static void GetFenceFd(VkDevice device, ref VkFenceGetFdInfo getFdInfo, [In, Out]int[] fd) => vkGetFenceFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, [In, Out]VkFenceGetFdInfo[] getFdInfo, [In, Out]int[] fd);
        public static void GetFenceFd(VkDevice device, [In, Out]VkFenceGetFdInfo[] getFdInfo, [In, Out]int[] fd) => vkGetFenceFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, out VkFenceGetWin32HandleInfo getWin32handleInfo, nint handle);
        public static void GetFenceWin32Handle(VkDevice device, out VkFenceGetWin32HandleInfo getWin32handleInfo, nint handle) => vkGetFenceWin32HandleKHR(device, out getWin32handleInfo, handle).AssertSuccess(nameof(vkGetFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, [In, Out]VkFenceGetWin32HandleInfo[] getWin32handleInfo, nint handle);
        public static void GetFenceWin32Handle(VkDevice device, [In, Out]VkFenceGetWin32HandleInfo[] getWin32handleInfo, nint handle) => vkGetFenceWin32HandleKHR(device, getWin32handleInfo, handle).AssertSuccess(nameof(vkGetFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, out int fd);
        public static void GetMemoryFd(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, out int fd) => vkGetMemoryFdKHR(device, ref getFdInfo, out fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, [In, Out]VkMemoryGetFdInfo[] getFdInfo, out int fd);
        public static void GetMemoryFd(VkDevice device, [In, Out]VkMemoryGetFdInfo[] getFdInfo, out int fd) => vkGetMemoryFdKHR(device, getFdInfo, out fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, [In, Out]int[] fd);
        public static void GetMemoryFd(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, [In, Out]int[] fd) => vkGetMemoryFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, [In, Out]VkMemoryGetFdInfo[] getFdInfo, [In, Out]int[] fd);
        public static void GetMemoryFd(VkDevice device, [In, Out]VkMemoryGetFdInfo[] getFdInfo, [In, Out]int[] fd) => vkGetMemoryFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, out VkMemoryFdProperties memoryFdProperties);
        public static void GetMemoryFdProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, out VkMemoryFdProperties memoryFdProperties) => vkGetMemoryFdPropertiesKHR(device, handleType, fd, out memoryFdProperties).AssertSuccess(nameof(vkGetMemoryFdPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, [In, Out]VkMemoryFdProperties[] memoryFdProperties);
        public static void GetMemoryFdProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, [In, Out]VkMemoryFdProperties[] memoryFdProperties) => vkGetMemoryFdPropertiesKHR(device, handleType, fd, memoryFdProperties).AssertSuccess(nameof(vkGetMemoryFdPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, out VkMemoryGetWin32HandleInfo getWin32handleInfo, nint handle);
        public static void GetMemoryWin32Handle(VkDevice device, out VkMemoryGetWin32HandleInfo getWin32handleInfo, nint handle) => vkGetMemoryWin32HandleKHR(device, out getWin32handleInfo, handle).AssertSuccess(nameof(vkGetMemoryWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, [In, Out]VkMemoryGetWin32HandleInfo[] getWin32handleInfo, nint handle);
        public static void GetMemoryWin32Handle(VkDevice device, [In, Out]VkMemoryGetWin32HandleInfo[] getWin32handleInfo, nint handle) => vkGetMemoryWin32HandleKHR(device, getWin32handleInfo, handle).AssertSuccess(nameof(vkGetMemoryWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, out VkMemoryWin32HandleProperties MemoryWin32handleProperties);
        public static void GetMemoryWin32HandleProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, out VkMemoryWin32HandleProperties MemoryWin32handleProperties) => vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, out MemoryWin32handleProperties).AssertSuccess(nameof(vkGetMemoryWin32HandlePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, [In, Out]VkMemoryWin32HandleProperties[] MemoryWin32handleProperties);
        public static void GetMemoryWin32HandleProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, [In, Out]VkMemoryWin32HandleProperties[] MemoryWin32handleProperties) => vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, MemoryWin32handleProperties).AssertSuccess(nameof(vkGetMemoryWin32HandlePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayPlaneProperties2 properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayPlaneProperties2 properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, ref propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayPlaneProperties2 properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayPlaneProperties2 properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayPlaneProperties2[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayPlaneProperties2[] properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayPlaneProperties2[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayPlaneProperties2[] properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayPlaneProperties properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayPlaneProperties properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, ref propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayPlaneProperties properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayPlaneProperties properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayPlaneProperties[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayPlaneProperties[] properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayPlaneProperties[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayPlaneProperties[] properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayProperties2 properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayProperties2 properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, ref propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayProperties2 properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayProperties2 properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayProperties2[] properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayProperties2[] properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayProperties2[] properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayProperties2[] properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayProperties properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, out VkDisplayProperties properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, ref propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayProperties properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, out VkDisplayProperties properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, propertyCount, out properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayProperties[] properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out]VkDisplayProperties[] properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayProperties[] properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, [In, Out]uint[] propertyCount, [In, Out]VkDisplayProperties[] properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, out VkRect2D rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, out VkRect2D rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, ref rectCount, out rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] rectCount, out VkRect2D rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] rectCount, out VkRect2D rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, rectCount, out rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, [In, Out]VkRect2D[] rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, [In, Out]VkRect2D[] rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, ref rectCount, rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] rectCount, [In, Out]VkRect2D[] rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] rectCount, [In, Out]VkRect2D[] rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, rectCount, rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, out uint numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, out uint numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, ref performanceQueryCreateInfo, out numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, [In, Out]VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, out uint numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, [In, Out]VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, out uint numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, performanceQueryCreateInfo, out numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, [In, Out]uint[] numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, [In, Out]uint[] numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, ref performanceQueryCreateInfo, numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, [In, Out]VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, [In, Out]uint[] numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, [In, Out]VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, [In, Out]uint[] numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, performanceQueryCreateInfo, numPasses);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, out VkSurfaceCapabilities surfaceCapabilities);
        public static void GetPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice, VkSurface surface, out VkSurfaceCapabilities surfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, out surfaceCapabilities).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]VkSurfaceCapabilities[] surfaceCapabilities);
        public static void GetPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]VkSurfaceCapabilities[] surfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, surfaceCapabilities).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, ref surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, [In, Out]VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, out VkSurfaceFormat surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, out VkSurfaceFormat surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, ref surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] surfaceFormatCount, out VkSurfaceFormat surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, surfaceFormatCount, out surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, [In, Out]VkSurfaceFormat[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] surfaceFormatCount, [In, Out]VkSurfaceFormat[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, out VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, out VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, ref presentModeCount, out presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] presentModeCount, out VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] presentModeCount, out VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, presentModeCount, out presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, [In, Out]VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, [In, Out]VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, ref presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] presentModeCount, [In, Out]VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, [In, Out]uint[] presentModeCount, [In, Out]VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, out VkBool32 supported);
        public static void GetPhysicalDeviceSurfaceSupport(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, out VkBool32 supported) => vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, out supported).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceSupportKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, [In, Out]VkBool32[] supported);
        public static void GetPhysicalDeviceSurfaceSupport(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, [In, Out]VkBool32[] supported) => vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, supported).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceSupportKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, ref internalRepresentationCount, out internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, ref internalRepresentationCount, out internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, internalRepresentationCount, out internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] internalRepresentationCount, out VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, internalRepresentationCount, out internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, ref internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, ref internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] internalRepresentationCount, [In, Out]VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, out VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, out VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, ref executableCount, out properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, ref uint executableCount, out VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, ref uint executableCount, out VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, ref executableCount, out properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, [In, Out]uint[] executableCount, out VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, [In, Out]uint[] executableCount, out VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, executableCount, out properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, [In, Out]uint[] executableCount, out VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, [In, Out]uint[] executableCount, out VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, executableCount, out properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, [In, Out]VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, [In, Out]VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, ref executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, ref uint executableCount, [In, Out]VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, ref uint executableCount, [In, Out]VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, ref executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, [In, Out]uint[] executableCount, [In, Out]VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, [In, Out]uint[] executableCount, [In, Out]VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, [In, Out]uint[] executableCount, [In, Out]VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, [In, Out]VkPipelineInfo[] pipelineInfo, [In, Out]uint[] executableCount, [In, Out]VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, out VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, out VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, ref statisticCount, out statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, out VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, out VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, ref statisticCount, out statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] statisticCount, out VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] statisticCount, out VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, statisticCount, out statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] statisticCount, out VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] statisticCount, out VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, statisticCount, out statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, ref statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, ref statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, [In, Out]uint[] statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, [In, Out]VkPipelineExecutableInfo[] executableInfo, [In, Out]uint[] statisticCount, [In, Out]VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, out int fd);
        public static void GetSemaphoreFd(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, out int fd) => vkGetSemaphoreFdKHR(device, ref getFdInfo, out fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, [In, Out]VkSemaphoreGetFdInfo[] getFdInfo, out int fd);
        public static void GetSemaphoreFd(VkDevice device, [In, Out]VkSemaphoreGetFdInfo[] getFdInfo, out int fd) => vkGetSemaphoreFdKHR(device, getFdInfo, out fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, [In, Out]int[] fd);
        public static void GetSemaphoreFd(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, [In, Out]int[] fd) => vkGetSemaphoreFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, [In, Out]VkSemaphoreGetFdInfo[] getFdInfo, [In, Out]int[] fd);
        public static void GetSemaphoreFd(VkDevice device, [In, Out]VkSemaphoreGetFdInfo[] getFdInfo, [In, Out]int[] fd) => vkGetSemaphoreFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, out VkImage swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, out VkImage swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, ref swapchainImageCount, out swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, [In, Out]uint[] swapchainImageCount, out VkImage swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, [In, Out]uint[] swapchainImageCount, out VkImage swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, swapchainImageCount, out swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, [In, Out]VkImage[] swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, [In, Out]VkImage[] swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, ref swapchainImageCount, swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, [In, Out]uint[] swapchainImageCount, [In, Out]VkImage[] swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, [In, Out]uint[] swapchainImageCount, [In, Out]VkImage[] swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, swapchainImageCount, swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceFdKHR(VkDevice device, ref VkImportFenceFdInfo importFenceFdInfo);
        public static void ImportFenceFd(VkDevice device, ref VkImportFenceFdInfo importFenceFdInfo) => vkImportFenceFdKHR(device, ref importFenceFdInfo).AssertSuccess(nameof(vkImportFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceFdKHR(VkDevice device, [In, Out]VkImportFenceFdInfo[] importFenceFdInfo);
        public static void ImportFenceFd(VkDevice device, [In, Out]VkImportFenceFdInfo[] importFenceFdInfo) => vkImportFenceFdKHR(device, importFenceFdInfo).AssertSuccess(nameof(vkImportFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, ref VkImportFenceWin32HandleInfo ImportFenceWin32handleInfo);
        public static void ImportFenceWin32Handle(VkDevice device, ref VkImportFenceWin32HandleInfo ImportFenceWin32handleInfo) => vkImportFenceWin32HandleKHR(device, ref ImportFenceWin32handleInfo).AssertSuccess(nameof(vkImportFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, [In, Out]VkImportFenceWin32HandleInfo[] ImportFenceWin32handleInfo);
        public static void ImportFenceWin32Handle(VkDevice device, [In, Out]VkImportFenceWin32HandleInfo[] ImportFenceWin32handleInfo) => vkImportFenceWin32HandleKHR(device, ImportFenceWin32handleInfo).AssertSuccess(nameof(vkImportFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreFdKHR(VkDevice device, ref VkImportSemaphoreFdInfo importSemaphoreFdInfo);
        public static void ImportSemaphoreFd(VkDevice device, ref VkImportSemaphoreFdInfo importSemaphoreFdInfo) => vkImportSemaphoreFdKHR(device, ref importSemaphoreFdInfo).AssertSuccess(nameof(vkImportSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreFdKHR(VkDevice device, [In, Out]VkImportSemaphoreFdInfo[] importSemaphoreFdInfo);
        public static void ImportSemaphoreFd(VkDevice device, [In, Out]VkImportSemaphoreFdInfo[] importSemaphoreFdInfo) => vkImportSemaphoreFdKHR(device, importSemaphoreFdInfo).AssertSuccess(nameof(vkImportSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, ref VkImportSemaphoreWin32HandleInfo importSemaphoreWin32handleInfo);
        public static void ImportSemaphoreWin32Handle(VkDevice device, ref VkImportSemaphoreWin32HandleInfo importSemaphoreWin32handleInfo) => vkImportSemaphoreWin32HandleKHR(device, ref importSemaphoreWin32handleInfo).AssertSuccess(nameof(vkImportSemaphoreWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, [In, Out]VkImportSemaphoreWin32HandleInfo[] importSemaphoreWin32handleInfo);
        public static void ImportSemaphoreWin32Handle(VkDevice device, [In, Out]VkImportSemaphoreWin32HandleInfo[] importSemaphoreWin32handleInfo) => vkImportSemaphoreWin32HandleKHR(device, importSemaphoreWin32handleInfo).AssertSuccess(nameof(vkImportSemaphoreWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkQueuePresentKHR(VkQueue queue, ref VkPresentInfo presentInfo);
        public static void QueuePresent(VkQueue queue, ref VkPresentInfo presentInfo) => vkQueuePresentKHR(queue, ref presentInfo).AssertSuccess(nameof(vkQueuePresentKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkQueuePresentKHR(VkQueue queue, [In, Out]VkPresentInfo[] presentInfo);
        public static void QueuePresent(VkQueue queue, [In, Out]VkPresentInfo[] presentInfo) => vkQueuePresentKHR(queue, presentInfo).AssertSuccess(nameof(vkQueuePresentKHR));
    }
}