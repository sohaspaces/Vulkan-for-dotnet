using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Enums.Khronos;
using Vulkan.Handles;
using Vulkan.Handles.Khronos;
using Vulkan.Structs;
using Vulkan.Structs.Khronos;
namespace Vulkan
{
    public static unsafe partial class VkKhr
    {
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, ref uint imageIndex);
        public static void AcquireNextImage2(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, ref uint imageIndex) => vkAcquireNextImage2KHR(device, ref acquireInfo, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfo[] acquireInfo, ref uint imageIndex);
        public static void AcquireNextImage2(VkDevice device, VkAcquireNextImageInfo[] acquireInfo, ref uint imageIndex) => vkAcquireNextImage2KHR(device, acquireInfo, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, uint[] imageIndex);
        public static void AcquireNextImage2(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, uint[] imageIndex) => vkAcquireNextImage2KHR(device, ref acquireInfo, imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfo[] acquireInfo, uint[] imageIndex);
        public static void AcquireNextImage2(VkDevice device, VkAcquireNextImageInfo[] acquireInfo, uint[] imageIndex) => vkAcquireNextImage2KHR(device, acquireInfo, imageIndex).AssertSuccess(nameof(vkAcquireNextImage2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, ref uint imageIndex);
        public static void AcquireNextImage(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, ref uint imageIndex) => vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, ref imageIndex).AssertSuccess(nameof(vkAcquireNextImageKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint[] imageIndex);
        public static void AcquireNextImage(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint[] imageIndex) => vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, imageIndex).AssertSuccess(nameof(vkAcquireNextImageKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireProfilingLockKHR(VkDevice device, ref VkAcquireProfilingLockInfo info);
        public static void AcquireProfilingLock(VkDevice device, ref VkAcquireProfilingLockInfo info) => vkAcquireProfilingLockKHR(device, ref info).AssertSuccess(nameof(vkAcquireProfilingLockKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkAcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfo[] info);
        public static void AcquireProfilingLock(VkDevice device, VkAcquireProfilingLockInfo[] info) => vkAcquireProfilingLockKHR(device, info).AssertSuccess(nameof(vkAcquireProfilingLockKHR));
        [DllImport("vulkan-1")] private static extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites);
        public static void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, ref VkWriteDescriptorSet descriptorWrites) => vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, ref descriptorWrites);
        [DllImport("vulkan-1")] private static extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites);
        public static void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites) => vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateAndroidSurface(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateAndroidSurface(VkInstance instance, VkAndroidSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateAndroidSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateAndroidSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, ref allocator, ref mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, ref allocator, ref mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, allocator, ref mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDisplayMode mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDisplayMode mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, allocator, ref mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, ref allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, ref allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, ref createInfo, allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDisplayMode[] mode);
        public static void CreateDisplayMode(VkPhysicalDevice physicalDevice, VkDisplay display, VkDisplayModeCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDisplayMode[] mode) => vkCreateDisplayModeKHR(physicalDevice, display, createInfo, allocator, mode).AssertSuccess(nameof(vkCreateDisplayModeKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateDisplayPlaneSurface(VkInstance instance, VkDisplaySurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateDisplayPlaneSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateDisplayPlaneSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, ref allocator, ref swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, ref allocator, ref swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, allocator, ref swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, allocator, ref swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, ref allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, ref allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, ref VkSwapchainCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, ref createInfos, allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchains);
        public static void CreateSharedSwapchains(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchains) => vkCreateSharedSwapchainsKHR(device, swapchainCount, createInfos, allocator, swapchains).AssertSuccess(nameof(vkCreateSharedSwapchainsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchain) => vkCreateSwapchainKHR(device, ref createInfo, ref allocator, ref swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSwapchain swapchain) => vkCreateSwapchainKHR(device, createInfo, ref allocator, ref swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchain) => vkCreateSwapchainKHR(device, ref createInfo, allocator, ref swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchain);
        public static void CreateSwapchain(VkDevice device, VkSwapchainCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSwapchain swapchain) => vkCreateSwapchainKHR(device, createInfo, allocator, ref swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, ref createInfo, ref allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, VkSwapchainCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, createInfo, ref allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, ref VkSwapchainCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, ref createInfo, allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchain);
        public static void CreateSwapchain(VkDevice device, VkSwapchainCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSwapchain[] swapchain) => vkCreateSwapchainKHR(device, createInfo, allocator, swapchain).AssertSuccess(nameof(vkCreateSwapchainKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateWaylandSurface(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateWaylandSurface(VkInstance instance, VkWaylandSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateWaylandSurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWaylandSurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateWin32SurfaceKHR(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateWin32Surface(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateWin32SurfaceKHR(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateWin32Surface(VkInstance instance, VkWin32SurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateWin32SurfaceKHR(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateWin32SurfaceKHR));
        [DllImport("vulkan-1")] private static extern void vkDestroySurfaceKHR(VkInstance instance, VkSurface surface, ref VkAllocationCallbacks allocator);
        public static void DestroySurface(VkInstance instance, VkSurface surface, ref VkAllocationCallbacks allocator) => vkDestroySurfaceKHR(instance, surface, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySurfaceKHR(VkInstance instance, VkSurface surface, VkAllocationCallbacks[] allocator);
        public static void DestroySurface(VkInstance instance, VkSurface surface, VkAllocationCallbacks[] allocator) => vkDestroySurfaceKHR(instance, surface, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchain swapchain, ref VkAllocationCallbacks allocator);
        public static void DestroySwapchain(VkDevice device, VkSwapchain swapchain, ref VkAllocationCallbacks allocator) => vkDestroySwapchainKHR(device, swapchain, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchain swapchain, VkAllocationCallbacks[] allocator);
        public static void DestroySwapchain(VkDevice device, VkSwapchain swapchain, VkAllocationCallbacks[] allocator) => vkDestroySwapchainKHR(device, swapchain, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, ref counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, ref VkPerformanceCounter counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, ref counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, VkPerformanceCounter[] counters, ref VkPerformanceCounterDescription counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, counters, ref counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, ref VkPerformanceCounter counters, VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, ref counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, ref VkPerformanceCounter counters, VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, ref VkPerformanceCounter counters, VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, ref counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, VkPerformanceCounter[] counters, VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, VkPerformanceCounter[] counters, VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, ref counterCount, counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, VkPerformanceCounter[] counters, VkPerformanceCounterDescription[] counterDescriptions);
        public static void EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCounters(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint[] counterCount, VkPerformanceCounter[] counters, VkPerformanceCounterDescription[] counterDescriptions) => vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, counterCount, counters, counterDescriptions).AssertSuccess(nameof(vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, ref VkDeviceGroupPresentCapabilities deviceGroupPresentCapabilities);
        public static void GetDeviceGroupPresentCapabilities(VkDevice device, ref VkDeviceGroupPresentCapabilities deviceGroupPresentCapabilities) => vkGetDeviceGroupPresentCapabilitiesKHR(device, ref deviceGroupPresentCapabilities).AssertSuccess(nameof(vkGetDeviceGroupPresentCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilities[] deviceGroupPresentCapabilities);
        public static void GetDeviceGroupPresentCapabilities(VkDevice device, VkDeviceGroupPresentCapabilities[] deviceGroupPresentCapabilities) => vkGetDeviceGroupPresentCapabilitiesKHR(device, deviceGroupPresentCapabilities).AssertSuccess(nameof(vkGetDeviceGroupPresentCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurface surface, ref VkDeviceGroupPresentModeFlags modes);
        public static void GetDeviceGroupSurfacePresentModes(VkDevice device, VkSurface surface, ref VkDeviceGroupPresentModeFlags modes) => vkGetDeviceGroupSurfacePresentModesKHR(device, surface, ref modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurface surface, VkDeviceGroupPresentModeFlags[] modes);
        public static void GetDeviceGroupSurfacePresentModes(VkDevice device, VkSurface surface, VkDeviceGroupPresentModeFlags[] modes) => vkGetDeviceGroupSurfacePresentModesKHR(device, surface, modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, ref VkDisplayModeProperties2 properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, ref VkDisplayModeProperties2 properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, ref VkDisplayModeProperties2 properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, ref VkDisplayModeProperties2 properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, propertyCount, ref properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, VkDisplayModeProperties2[] properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, VkDisplayModeProperties2[] properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, ref propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, VkDisplayModeProperties2[] properties);
        public static void GetDisplayModeProperties2(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, VkDisplayModeProperties2[] properties) => vkGetDisplayModeProperties2KHR(physicalDevice, display, propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModeProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, ref VkDisplayModeProperties properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, ref VkDisplayModeProperties properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, ref VkDisplayModeProperties properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, ref VkDisplayModeProperties properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, propertyCount, ref properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, VkDisplayModeProperties[] properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, ref uint propertyCount, VkDisplayModeProperties[] properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, ref propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, VkDisplayModeProperties[] properties);
        public static void GetDisplayModeProperties(VkPhysicalDevice physicalDevice, VkDisplay display, uint[] propertyCount, VkDisplayModeProperties[] properties) => vkGetDisplayModePropertiesKHR(physicalDevice, display, propertyCount, properties).AssertSuccess(nameof(vkGetDisplayModePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, ref VkDisplayPlaneCapabilities2 capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, ref VkDisplayPlaneCapabilities2 capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, ref displayPlaneInfo, ref capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2[] displayPlaneInfo, ref VkDisplayPlaneCapabilities2 capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2[] displayPlaneInfo, ref VkDisplayPlaneCapabilities2 capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, displayPlaneInfo, ref capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, VkDisplayPlaneCapabilities2[] capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2 displayPlaneInfo, VkDisplayPlaneCapabilities2[] capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, ref displayPlaneInfo, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2[] displayPlaneInfo, VkDisplayPlaneCapabilities2[] capabilities);
        public static void GetDisplayPlaneCapabilities2(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2[] displayPlaneInfo, VkDisplayPlaneCapabilities2[] capabilities) => vkGetDisplayPlaneCapabilities2KHR(physicalDevice, displayPlaneInfo, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilities2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, ref VkDisplayPlaneCapabilities capabilities);
        public static void GetDisplayPlaneCapabilities(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, ref VkDisplayPlaneCapabilities capabilities) => vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, ref capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, VkDisplayPlaneCapabilities[] capabilities);
        public static void GetDisplayPlaneCapabilities(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, VkDisplayPlaneCapabilities[] capabilities) => vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, capabilities).AssertSuccess(nameof(vkGetDisplayPlaneCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, ref VkDisplay displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, ref VkDisplay displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, ref displayCount, ref displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint[] displayCount, ref VkDisplay displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, uint[] displayCount, ref VkDisplay displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, displayCount, ref displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, VkDisplay[] displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, VkDisplay[] displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, ref displayCount, displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint[] displayCount, VkDisplay[] displays);
        public static void GetDisplayPlaneSupportedDisplays(VkPhysicalDevice physicalDevice, uint planeIndex, uint[] displayCount, VkDisplay[] displays) => vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, displayCount, displays).AssertSuccess(nameof(vkGetDisplayPlaneSupportedDisplaysKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, ref VkFenceGetFdInfo getFdInfo, ref int fd);
        public static void GetFenceFd(VkDevice device, ref VkFenceGetFdInfo getFdInfo, ref int fd) => vkGetFenceFdKHR(device, ref getFdInfo, ref fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfo[] getFdInfo, ref int fd);
        public static void GetFenceFd(VkDevice device, VkFenceGetFdInfo[] getFdInfo, ref int fd) => vkGetFenceFdKHR(device, getFdInfo, ref fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, ref VkFenceGetFdInfo getFdInfo, int[] fd);
        public static void GetFenceFd(VkDevice device, ref VkFenceGetFdInfo getFdInfo, int[] fd) => vkGetFenceFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfo[] getFdInfo, int[] fd);
        public static void GetFenceFd(VkDevice device, VkFenceGetFdInfo[] getFdInfo, int[] fd) => vkGetFenceFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, ref VkFenceGetWin32HandleInfo getWin32handleInfo, nint handle);
        public static void GetFenceWin32Handle(VkDevice device, ref VkFenceGetWin32HandleInfo getWin32handleInfo, nint handle) => vkGetFenceWin32HandleKHR(device, ref getWin32handleInfo, handle).AssertSuccess(nameof(vkGetFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfo[] getWin32handleInfo, nint handle);
        public static void GetFenceWin32Handle(VkDevice device, VkFenceGetWin32HandleInfo[] getWin32handleInfo, nint handle) => vkGetFenceWin32HandleKHR(device, getWin32handleInfo, handle).AssertSuccess(nameof(vkGetFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, ref int fd);
        public static void GetMemoryFd(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, ref int fd) => vkGetMemoryFdKHR(device, ref getFdInfo, ref fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfo[] getFdInfo, ref int fd);
        public static void GetMemoryFd(VkDevice device, VkMemoryGetFdInfo[] getFdInfo, ref int fd) => vkGetMemoryFdKHR(device, getFdInfo, ref fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, int[] fd);
        public static void GetMemoryFd(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, int[] fd) => vkGetMemoryFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfo[] getFdInfo, int[] fd);
        public static void GetMemoryFd(VkDevice device, VkMemoryGetFdInfo[] getFdInfo, int[] fd) => vkGetMemoryFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetMemoryFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, ref VkMemoryFdProperties memoryFdProperties);
        public static void GetMemoryFdProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, ref VkMemoryFdProperties memoryFdProperties) => vkGetMemoryFdPropertiesKHR(device, handleType, fd, ref memoryFdProperties).AssertSuccess(nameof(vkGetMemoryFdPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdProperties[] memoryFdProperties);
        public static void GetMemoryFdProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdProperties[] memoryFdProperties) => vkGetMemoryFdPropertiesKHR(device, handleType, fd, memoryFdProperties).AssertSuccess(nameof(vkGetMemoryFdPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, ref VkMemoryGetWin32HandleInfo getWin32handleInfo, nint handle);
        public static void GetMemoryWin32Handle(VkDevice device, ref VkMemoryGetWin32HandleInfo getWin32handleInfo, nint handle) => vkGetMemoryWin32HandleKHR(device, ref getWin32handleInfo, handle).AssertSuccess(nameof(vkGetMemoryWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfo[] getWin32handleInfo, nint handle);
        public static void GetMemoryWin32Handle(VkDevice device, VkMemoryGetWin32HandleInfo[] getWin32handleInfo, nint handle) => vkGetMemoryWin32HandleKHR(device, getWin32handleInfo, handle).AssertSuccess(nameof(vkGetMemoryWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, ref VkMemoryWin32HandleProperties MemoryWin32handleProperties);
        public static void GetMemoryWin32HandleProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, ref VkMemoryWin32HandleProperties MemoryWin32handleProperties) => vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, ref MemoryWin32handleProperties).AssertSuccess(nameof(vkGetMemoryWin32HandlePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, VkMemoryWin32HandleProperties[] MemoryWin32handleProperties);
        public static void GetMemoryWin32HandleProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, VkMemoryWin32HandleProperties[] MemoryWin32handleProperties) => vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, MemoryWin32handleProperties).AssertSuccess(nameof(vkGetMemoryWin32HandlePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayPlaneProperties2 properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayPlaneProperties2 properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayPlaneProperties2 properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayPlaneProperties2 properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayPlaneProperties2[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayPlaneProperties2[] properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayPlaneProperties2[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties2(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayPlaneProperties2[] properties) => vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlaneProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayPlaneProperties properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayPlaneProperties properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayPlaneProperties properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayPlaneProperties properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayPlaneProperties[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayPlaneProperties[] properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayPlaneProperties[] properties);
        public static void GetPhysicalDeviceDisplayPlaneProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayPlaneProperties[] properties) => vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPlanePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayProperties2 properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayProperties2 properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayProperties2 properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayProperties2 properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayProperties2[] properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayProperties2[] properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayProperties2[] properties);
        public static void GetPhysicalDeviceDisplayProperties2(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayProperties2[] properties) => vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayProperties2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayProperties properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkDisplayProperties properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayProperties properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkDisplayProperties properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayProperties[] properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkDisplayProperties[] properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayProperties[] properties);
        public static void GetPhysicalDeviceDisplayProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkDisplayProperties[] properties) => vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceDisplayPropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, ref VkRect2D rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, ref VkRect2D rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, ref rectCount, ref rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] rectCount, ref VkRect2D rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] rectCount, ref VkRect2D rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, rectCount, ref rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, VkRect2D[] rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, VkRect2D[] rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, ref rectCount, rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] rectCount, VkRect2D[] rects);
        public static void GetPhysicalDevicePresentRectangles(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] rectCount, VkRect2D[] rects) => vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, rectCount, rects).AssertSuccess(nameof(vkGetPhysicalDevicePresentRectanglesKHR));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, ref uint numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, ref uint numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, ref performanceQueryCreateInfo, ref numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, ref uint numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, ref uint numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, performanceQueryCreateInfo, ref numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, uint[] numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfo performanceQueryCreateInfo, uint[] numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, ref performanceQueryCreateInfo, numPasses);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, uint[] numPasses);
        public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPasses(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfo[] performanceQueryCreateInfo, uint[] numPasses) => vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, performanceQueryCreateInfo, numPasses);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref VkSurfaceCapabilities surfaceCapabilities);
        public static void GetPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice, VkSurface surface, ref VkSurfaceCapabilities surfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, ref surfaceCapabilities).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, VkSurfaceCapabilities[] surfaceCapabilities);
        public static void GetPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice, VkSurface surface, VkSurfaceCapabilities[] surfaceCapabilities) => vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, surfaceCapabilities).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceCapabilitiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, ref surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] surfaceFormatCount, ref VkSurfaceFormat2 surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, ref surfaceInfo, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] surfaceFormatCount, VkSurfaceFormat2[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, surfaceInfo, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormats2KHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, ref VkSurfaceFormat surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, ref VkSurfaceFormat surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, ref surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] surfaceFormatCount, ref VkSurfaceFormat surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] surfaceFormatCount, ref VkSurfaceFormat surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, surfaceFormatCount, ref surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, VkSurfaceFormat[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint surfaceFormatCount, VkSurfaceFormat[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, ref surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] surfaceFormatCount, VkSurfaceFormat[] surfaceFormats);
        public static void GetPhysicalDeviceSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] surfaceFormatCount, VkSurfaceFormat[] surfaceFormats) => vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, surfaceFormatCount, surfaceFormats).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceFormatsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, ref presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, ref presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes(VkPhysicalDevice physicalDevice, VkSurface surface, uint[] presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, ref VkBool32 supported);
        public static void GetPhysicalDeviceSurfaceSupport(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, ref VkBool32 supported) => vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, ref supported).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceSupportKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, VkBool32[] supported);
        public static void GetPhysicalDeviceSurfaceSupport(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, VkBool32[] supported) => vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, supported).AssertSuccess(nameof(vkGetPhysicalDeviceSurfaceSupportKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, ref internalRepresentationCount, ref internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, ref internalRepresentationCount, ref internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, internalRepresentationCount, ref internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] internalRepresentationCount, ref VkPipelineExecutableInternalRepresentation internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, internalRepresentationCount, ref internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, ref internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, ref internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, ref executableInfo, internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations);
        public static void GetPipelineExecutableInternalRepresentations(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] internalRepresentationCount, VkPipelineExecutableInternalRepresentation[] internalRepresentations) => vkGetPipelineExecutableInternalRepresentationsKHR(device, executableInfo, internalRepresentationCount, internalRepresentations).AssertSuccess(nameof(vkGetPipelineExecutableInternalRepresentationsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, ref VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, ref VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, ref executableCount, ref properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfo[] pipelineInfo, ref uint executableCount, ref VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, VkPipelineInfo[] pipelineInfo, ref uint executableCount, ref VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, ref executableCount, ref properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, uint[] executableCount, ref VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, uint[] executableCount, ref VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, executableCount, ref properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfo[] pipelineInfo, uint[] executableCount, ref VkPipelineExecutableProperties properties);
        public static void GetPipelineExecutableProperties(VkDevice device, VkPipelineInfo[] pipelineInfo, uint[] executableCount, ref VkPipelineExecutableProperties properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, executableCount, ref properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, ref uint executableCount, VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, ref executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfo[] pipelineInfo, ref uint executableCount, VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, VkPipelineInfo[] pipelineInfo, ref uint executableCount, VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, ref executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfo pipelineInfo, uint[] executableCount, VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, ref VkPipelineInfo pipelineInfo, uint[] executableCount, VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, ref pipelineInfo, executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfo[] pipelineInfo, uint[] executableCount, VkPipelineExecutableProperties[] properties);
        public static void GetPipelineExecutableProperties(VkDevice device, VkPipelineInfo[] pipelineInfo, uint[] executableCount, VkPipelineExecutableProperties[] properties) => vkGetPipelineExecutablePropertiesKHR(device, pipelineInfo, executableCount, properties).AssertSuccess(nameof(vkGetPipelineExecutablePropertiesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, ref VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, ref VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, ref statisticCount, ref statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, ref VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, ref VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, ref statisticCount, ref statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] statisticCount, ref VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] statisticCount, ref VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, statisticCount, ref statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] statisticCount, ref VkPipelineExecutableStatistic statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] statisticCount, ref VkPipelineExecutableStatistic statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, statisticCount, ref statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, ref uint statisticCount, VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, ref statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, VkPipelineExecutableInfo[] executableInfo, ref uint statisticCount, VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, ref statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] statisticCount, VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, ref VkPipelineExecutableInfo executableInfo, uint[] statisticCount, VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, ref executableInfo, statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] statisticCount, VkPipelineExecutableStatistic[] statistics);
        public static void GetPipelineExecutableStatistics(VkDevice device, VkPipelineExecutableInfo[] executableInfo, uint[] statisticCount, VkPipelineExecutableStatistic[] statistics) => vkGetPipelineExecutableStatisticsKHR(device, executableInfo, statisticCount, statistics).AssertSuccess(nameof(vkGetPipelineExecutableStatisticsKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, ref int fd);
        public static void GetSemaphoreFd(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, ref int fd) => vkGetSemaphoreFdKHR(device, ref getFdInfo, ref fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfo[] getFdInfo, ref int fd);
        public static void GetSemaphoreFd(VkDevice device, VkSemaphoreGetFdInfo[] getFdInfo, ref int fd) => vkGetSemaphoreFdKHR(device, getFdInfo, ref fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, int[] fd);
        public static void GetSemaphoreFd(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, int[] fd) => vkGetSemaphoreFdKHR(device, ref getFdInfo, fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfo[] getFdInfo, int[] fd);
        public static void GetSemaphoreFd(VkDevice device, VkSemaphoreGetFdInfo[] getFdInfo, int[] fd) => vkGetSemaphoreFdKHR(device, getFdInfo, fd).AssertSuccess(nameof(vkGetSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, ref VkImage swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, ref VkImage swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, ref swapchainImageCount, ref swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, uint[] swapchainImageCount, ref VkImage swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, uint[] swapchainImageCount, ref VkImage swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, swapchainImageCount, ref swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, VkImage[] swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, ref uint swapchainImageCount, VkImage[] swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, ref swapchainImageCount, swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, uint[] swapchainImageCount, VkImage[] swapchainImages);
        public static void GetSwapchainImages(VkDevice device, VkSwapchain swapchain, uint[] swapchainImageCount, VkImage[] swapchainImages) => vkGetSwapchainImagesKHR(device, swapchain, swapchainImageCount, swapchainImages).AssertSuccess(nameof(vkGetSwapchainImagesKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceFdKHR(VkDevice device, ref VkImportFenceFdInfo importFenceFdInfo);
        public static void ImportFenceFd(VkDevice device, ref VkImportFenceFdInfo importFenceFdInfo) => vkImportFenceFdKHR(device, ref importFenceFdInfo).AssertSuccess(nameof(vkImportFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfo[] importFenceFdInfo);
        public static void ImportFenceFd(VkDevice device, VkImportFenceFdInfo[] importFenceFdInfo) => vkImportFenceFdKHR(device, importFenceFdInfo).AssertSuccess(nameof(vkImportFenceFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, ref VkImportFenceWin32HandleInfo ImportFenceWin32handleInfo);
        public static void ImportFenceWin32Handle(VkDevice device, ref VkImportFenceWin32HandleInfo ImportFenceWin32handleInfo) => vkImportFenceWin32HandleKHR(device, ref ImportFenceWin32handleInfo).AssertSuccess(nameof(vkImportFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfo[] ImportFenceWin32handleInfo);
        public static void ImportFenceWin32Handle(VkDevice device, VkImportFenceWin32HandleInfo[] ImportFenceWin32handleInfo) => vkImportFenceWin32HandleKHR(device, ImportFenceWin32handleInfo).AssertSuccess(nameof(vkImportFenceWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreFdKHR(VkDevice device, ref VkImportSemaphoreFdInfo importSemaphoreFdInfo);
        public static void ImportSemaphoreFd(VkDevice device, ref VkImportSemaphoreFdInfo importSemaphoreFdInfo) => vkImportSemaphoreFdKHR(device, ref importSemaphoreFdInfo).AssertSuccess(nameof(vkImportSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfo[] importSemaphoreFdInfo);
        public static void ImportSemaphoreFd(VkDevice device, VkImportSemaphoreFdInfo[] importSemaphoreFdInfo) => vkImportSemaphoreFdKHR(device, importSemaphoreFdInfo).AssertSuccess(nameof(vkImportSemaphoreFdKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, ref VkImportSemaphoreWin32HandleInfo importSemaphoreWin32handleInfo);
        public static void ImportSemaphoreWin32Handle(VkDevice device, ref VkImportSemaphoreWin32HandleInfo importSemaphoreWin32handleInfo) => vkImportSemaphoreWin32HandleKHR(device, ref importSemaphoreWin32handleInfo).AssertSuccess(nameof(vkImportSemaphoreWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfo[] importSemaphoreWin32handleInfo);
        public static void ImportSemaphoreWin32Handle(VkDevice device, VkImportSemaphoreWin32HandleInfo[] importSemaphoreWin32handleInfo) => vkImportSemaphoreWin32HandleKHR(device, importSemaphoreWin32handleInfo).AssertSuccess(nameof(vkImportSemaphoreWin32HandleKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkQueuePresentKHR(VkQueue queue, ref VkPresentInfo presentInfo);
        public static void QueuePresent(VkQueue queue, ref VkPresentInfo presentInfo) => vkQueuePresentKHR(queue, ref presentInfo).AssertSuccess(nameof(vkQueuePresentKHR));
        [DllImport("vulkan-1")] private static extern VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfo[] presentInfo);
        public static void QueuePresent(VkQueue queue, VkPresentInfo[] presentInfo) => vkQueuePresentKHR(queue, presentInfo).AssertSuccess(nameof(vkQueuePresentKHR));
    }
}