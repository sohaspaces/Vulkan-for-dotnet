using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Enums.Nvidia;
using Vulkan.Handles;
using Vulkan.Handles.Nvidia;
using Vulkan.Structs;
using Vulkan.Structs.Nvidia;
namespace Vulkan
{
    public static unsafe partial class VkNv
    {
        [DllImport("vulkan-1")] private static extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, ref VkBindAccelerationStructureMemoryInfo bindInfos);
        public static void BindAccelerationStructureMemory(VkDevice device, uint bindInfoCount, ref VkBindAccelerationStructureMemoryInfo bindInfos) => vkBindAccelerationStructureMemoryNV(device, bindInfoCount, ref bindInfos).AssertSuccess(nameof(vkBindAccelerationStructureMemoryNV));
        [DllImport("vulkan-1")] private static extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfo[] bindInfos);
        public static void BindAccelerationStructureMemory(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfo[] bindInfos) => vkBindAccelerationStructureMemoryNV(device, bindInfoCount, bindInfos).AssertSuccess(nameof(vkBindAccelerationStructureMemoryNV));
        [DllImport("vulkan-1")] private static extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, ref VkAccelerationStructureInfo info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset);
        public static void CmdBuildAccelerationStructure(VkCommandBuffer commandBuffer, ref VkAccelerationStructureInfo info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset) => vkCmdBuildAccelerationStructureNV(commandBuffer, ref info, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        [DllImport("vulkan-1")] private static extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfo[] info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset);
        public static void CmdBuildAccelerationStructure(VkCommandBuffer commandBuffer, VkAccelerationStructureInfo[] info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructure dst, VkAccelerationStructure src, VkBuffer scratch, VkDeviceSize scratchOffset) => vkCmdBuildAccelerationStructureNV(commandBuffer, info, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        [DllImport("vulkan-1")] private static extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, ref VkCoarseSampleOrderCustom customSampleOrders);
        public static void CmdSetCoarseSampleOrder(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, ref VkCoarseSampleOrderCustom customSampleOrders) => vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, ref customSampleOrders);
        [DllImport("vulkan-1")] private static extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustom[] customSampleOrders);
        public static void CmdSetCoarseSampleOrder(VkCommandBuffer commandBuffer, VkCoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustom[] customSampleOrders) => vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, customSampleOrders);
        [DllImport("vulkan-1")] private static extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, ref VkRect2D exclusiveScissors);
        public static void CmdSetExclusiveScissor(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, ref VkRect2D exclusiveScissors) => vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, ref exclusiveScissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D[] exclusiveScissors);
        public static void CmdSetExclusiveScissor(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D[] exclusiveScissors) => vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, exclusiveScissors);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkShadingRatePalette shadingRatePalettes);
        public static void CmdSetViewportShadingRatePalette(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkShadingRatePalette shadingRatePalettes) => vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, ref shadingRatePalettes);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePalette[] shadingRatePalettes);
        public static void CmdSetViewportShadingRatePalette(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePalette[] shadingRatePalettes) => vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, shadingRatePalettes);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewportWScaling viewportWScalings);
        public static void CmdSetViewportWScaling(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewportWScaling viewportWScalings) => vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, ref viewportWScalings);
        [DllImport("vulkan-1")] private static extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScaling[] viewportWScalings);
        public static void CmdSetViewportWScaling(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScaling[] viewportWScalings) => vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, viewportWScalings);
        [DllImport("vulkan-1")] private static extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, ref VkAccelerationStructure accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery);
        public static void CmdWriteAccelerationStructuresProperties(VkCommandBuffer commandBuffer, uint accelerationStructureCount, ref VkAccelerationStructure accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, ref accelerationStructures, queryType, queryPool, firstQuery);
        [DllImport("vulkan-1")] private static extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructure[] accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery);
        public static void CmdWriteAccelerationStructuresProperties(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructure[] accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkAccelerationStructure accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkAccelerationStructure accelerationStructure) => vkCreateAccelerationStructureNV(device, ref createInfo, ref allocator, ref accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkAccelerationStructure accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkAccelerationStructure accelerationStructure) => vkCreateAccelerationStructureNV(device, createInfo, ref allocator, ref accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkAccelerationStructure accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkAccelerationStructure accelerationStructure) => vkCreateAccelerationStructureNV(device, ref createInfo, allocator, ref accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkAccelerationStructure accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkAccelerationStructure accelerationStructure) => vkCreateAccelerationStructureNV(device, createInfo, allocator, ref accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkAccelerationStructure[] accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkAccelerationStructure[] accelerationStructure) => vkCreateAccelerationStructureNV(device, ref createInfo, ref allocator, accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkAccelerationStructure[] accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkAccelerationStructure[] accelerationStructure) => vkCreateAccelerationStructureNV(device, createInfo, ref allocator, accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkAccelerationStructure[] accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, ref VkAccelerationStructureCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkAccelerationStructure[] accelerationStructure) => vkCreateAccelerationStructureNV(device, ref createInfo, allocator, accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkAccelerationStructure[] accelerationStructure);
        public static void CreateAccelerationStructure(VkDevice device, VkAccelerationStructureCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkAccelerationStructure[] accelerationStructure) => vkCreateAccelerationStructureNV(device, createInfo, allocator, accelerationStructure).AssertSuccess(nameof(vkCreateAccelerationStructureNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, ref VkPipeline pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, createInfos, ref allocator, ref pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, ref createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, ref VkPipeline pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, createInfos, allocator, ref pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, ref createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, VkPipeline[] pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, createInfos, ref allocator, pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkRayTracingPipelineCreateInfo createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, ref createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines);
        public static void CreateRayTracingPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfo[] createInfos, VkAllocationCallbacks[] allocator, VkPipeline[] pipelines) => vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines).AssertSuccess(nameof(vkCreateRayTracingPipelinesNV));
        [DllImport("vulkan-1")] private static extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructure accelerationStructure, ref VkAllocationCallbacks allocator);
        public static void DestroyAccelerationStructure(VkDevice device, VkAccelerationStructure accelerationStructure, ref VkAllocationCallbacks allocator) => vkDestroyAccelerationStructureNV(device, accelerationStructure, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructure accelerationStructure, VkAllocationCallbacks[] allocator);
        public static void DestroyAccelerationStructure(VkDevice device, VkAccelerationStructure accelerationStructure, VkAllocationCallbacks[] allocator) => vkDestroyAccelerationStructureNV(device, accelerationStructure, allocator);
        [DllImport("vulkan-1")] private static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, ref VkAccelerationStructureMemoryRequirementsInfo info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetAccelerationStructureMemoryRequirements(VkDevice device, ref VkAccelerationStructureMemoryRequirementsInfo info, ref VkMemoryRequirements2 memoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, ref info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo[] info, ref VkMemoryRequirements2 memoryRequirements);
        public static void GetAccelerationStructureMemoryRequirements(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo[] info, ref VkMemoryRequirements2 memoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, info, ref memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, ref VkAccelerationStructureMemoryRequirementsInfo info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetAccelerationStructureMemoryRequirements(VkDevice device, ref VkAccelerationStructureMemoryRequirementsInfo info, VkMemoryRequirements2[] memoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, ref info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo[] info, VkMemoryRequirements2[] memoryRequirements);
        public static void GetAccelerationStructureMemoryRequirements(VkDevice device, VkAccelerationStructureMemoryRequirementsInfo[] info, VkMemoryRequirements2[] memoryRequirements) => vkGetAccelerationStructureMemoryRequirementsNV(device, info, memoryRequirements);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkCooperativeMatrixProperties properties);
        public static void GetPhysicalDeviceCooperativeMatrixProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, ref VkCooperativeMatrixProperties properties) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, ref propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkCooperativeMatrixProperties properties);
        public static void GetPhysicalDeviceCooperativeMatrixProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, ref VkCooperativeMatrixProperties properties) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, propertyCount, ref properties).AssertSuccess(nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkCooperativeMatrixProperties[] properties);
        public static void GetPhysicalDeviceCooperativeMatrixProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkCooperativeMatrixProperties[] properties) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, ref propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkCooperativeMatrixProperties[] properties);
        public static void GetPhysicalDeviceCooperativeMatrixProperties(VkPhysicalDevice physicalDevice, uint[] propertyCount, VkCooperativeMatrixProperties[] properties) => vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, propertyCount, properties).AssertSuccess(nameof(vkGetPhysicalDeviceCooperativeMatrixPropertiesNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, ref uint combinationCount, ref VkFramebufferMixedSamplesCombination combinations);
        public static void GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinations(VkPhysicalDevice physicalDevice, ref uint combinationCount, ref VkFramebufferMixedSamplesCombination combinations) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, ref combinationCount, ref combinations).AssertSuccess(nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint[] combinationCount, ref VkFramebufferMixedSamplesCombination combinations);
        public static void GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinations(VkPhysicalDevice physicalDevice, uint[] combinationCount, ref VkFramebufferMixedSamplesCombination combinations) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, combinationCount, ref combinations).AssertSuccess(nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, ref uint combinationCount, VkFramebufferMixedSamplesCombination[] combinations);
        public static void GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinations(VkPhysicalDevice physicalDevice, ref uint combinationCount, VkFramebufferMixedSamplesCombination[] combinations) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, ref combinationCount, combinations).AssertSuccess(nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint[] combinationCount, VkFramebufferMixedSamplesCombination[] combinations);
        public static void GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinations(VkPhysicalDevice physicalDevice, uint[] combinationCount, VkFramebufferMixedSamplesCombination[] combinations) => vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, combinationCount, combinations).AssertSuccess(nameof(vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV));
        [DllImport("vulkan-1")] private static extern void vkGetQueueCheckpointDataNV(VkQueue queue, ref uint checkpointDataCount, ref VkCheckpointData checkpointData);
        public static void GetQueueCheckpointData(VkQueue queue, ref uint checkpointDataCount, ref VkCheckpointData checkpointData) => vkGetQueueCheckpointDataNV(queue, ref checkpointDataCount, ref checkpointData);
        [DllImport("vulkan-1")] private static extern void vkGetQueueCheckpointDataNV(VkQueue queue, uint[] checkpointDataCount, ref VkCheckpointData checkpointData);
        public static void GetQueueCheckpointData(VkQueue queue, uint[] checkpointDataCount, ref VkCheckpointData checkpointData) => vkGetQueueCheckpointDataNV(queue, checkpointDataCount, ref checkpointData);
        [DllImport("vulkan-1")] private static extern void vkGetQueueCheckpointDataNV(VkQueue queue, ref uint checkpointDataCount, VkCheckpointData[] checkpointData);
        public static void GetQueueCheckpointData(VkQueue queue, ref uint checkpointDataCount, VkCheckpointData[] checkpointData) => vkGetQueueCheckpointDataNV(queue, ref checkpointDataCount, checkpointData);
        [DllImport("vulkan-1")] private static extern void vkGetQueueCheckpointDataNV(VkQueue queue, uint[] checkpointDataCount, VkCheckpointData[] checkpointData);
        public static void GetQueueCheckpointData(VkQueue queue, uint[] checkpointDataCount, VkCheckpointData[] checkpointData) => vkGetQueueCheckpointDataNV(queue, checkpointDataCount, checkpointData);
    }
}