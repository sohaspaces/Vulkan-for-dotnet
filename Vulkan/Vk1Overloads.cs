using System.Runtime.InteropServices;
using Vulkan.Enums;
using Vulkan.Enums.Extension;
using Vulkan.Enums.Khronos;
using Vulkan.Handles;
using Vulkan.Handles.Extension;
using Vulkan.Handles.Khronos;
using Vulkan.Structs;
using Vulkan.Structs.Extension;
using Vulkan.Structs.Khronos;
namespace Vulkan
{
    public static unsafe partial class VkExt
    {
        [DllImport("vulkan-1")] private static extern void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, ref VkConditionalRenderingBeginInfo conditionalRenderingBegin);
        public static void CmdBeginConditionalRendering(VkCommandBuffer commandBuffer, ref VkConditionalRenderingBeginInfo conditionalRenderingBegin) => vkCmdBeginConditionalRenderingEXT(commandBuffer, ref conditionalRenderingBegin);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfo[] conditionalRenderingBegin);
        public static void CmdBeginConditionalRendering(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfo[] conditionalRenderingBegin) => vkCmdBeginConditionalRenderingEXT(commandBuffer, conditionalRenderingBegin);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabel labelInfo);
        public static void CmdBeginDebugUtilsLabel(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabel labelInfo) => vkCmdBeginDebugUtilsLabelEXT(commandBuffer, ref labelInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabel[] labelInfo);
        public static void CmdBeginDebugUtilsLabel(VkCommandBuffer commandBuffer, VkDebugUtilsLabel[] labelInfo) => vkCmdBeginDebugUtilsLabelEXT(commandBuffer, labelInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, ref VkDeviceSize counterBufferOffsets);
        public static void CmdBeginTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, ref VkDeviceSize counterBufferOffsets) => vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, ref counterBuffers, ref counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets);
        public static void CmdBeginTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets) => vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, ref counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, VkDeviceSize[] counterBufferOffsets);
        public static void CmdBeginTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, VkDeviceSize[] counterBufferOffsets) => vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, ref counterBuffers, counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize[] counterBufferOffsets);
        public static void CmdBeginTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize[] counterBufferOffsets) => vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets, ref VkDeviceSize sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets, ref VkDeviceSize sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets, ref VkDeviceSize sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets, ref VkDeviceSize sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize[] sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize[] sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets, VkDeviceSize[] sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, ref VkDeviceSize offsets, VkDeviceSize[] sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets, VkDeviceSize[] sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize[] offsets, VkDeviceSize[] sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets, VkDeviceSize[] sizes);
        public static void CmdBindTransformFeedbackBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer[] buffers, VkDeviceSize[] offsets, VkDeviceSize[] sizes) => vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes);
        [DllImport("vulkan-1")] private static extern void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo);
        public static void CmdDebugMarkerBegin(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo) => vkCmdDebugMarkerBeginEXT(commandBuffer, ref markerInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfo[] markerInfo);
        public static void CmdDebugMarkerBegin(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfo[] markerInfo) => vkCmdDebugMarkerBeginEXT(commandBuffer, markerInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo);
        public static void CmdDebugMarkerInsert(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo) => vkCmdDebugMarkerInsertEXT(commandBuffer, ref markerInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfo[] markerInfo);
        public static void CmdDebugMarkerInsert(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfo[] markerInfo) => vkCmdDebugMarkerInsertEXT(commandBuffer, markerInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, ref VkDeviceSize counterBufferOffsets);
        public static void CmdEndTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, ref VkDeviceSize counterBufferOffsets) => vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, ref counterBuffers, ref counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets);
        public static void CmdEndTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets) => vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, ref counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, VkDeviceSize[] counterBufferOffsets);
        public static void CmdEndTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref VkBuffer counterBuffers, VkDeviceSize[] counterBufferOffsets) => vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, ref counterBuffers, counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize[] counterBufferOffsets);
        public static void CmdEndTransformFeedback(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize[] counterBufferOffsets) => vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
        [DllImport("vulkan-1")] private static extern void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabel labelInfo);
        public static void CmdInsertDebugUtilsLabel(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabel labelInfo) => vkCmdInsertDebugUtilsLabelEXT(commandBuffer, ref labelInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabel[] labelInfo);
        public static void CmdInsertDebugUtilsLabel(VkCommandBuffer commandBuffer, VkDebugUtilsLabel[] labelInfo) => vkCmdInsertDebugUtilsLabelEXT(commandBuffer, labelInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, ref VkRect2D discardRectangles);
        public static void CmdSetDiscardRectangle(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, ref VkRect2D discardRectangles) => vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, ref discardRectangles);
        [DllImport("vulkan-1")] private static extern void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D[] discardRectangles);
        public static void CmdSetDiscardRectangle(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D[] discardRectangles) => vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, discardRectangles);
        [DllImport("vulkan-1")] private static extern void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, ref VkSampleLocationsInfo sampleLocationsInfo);
        public static void CmdSetSampleLocations(VkCommandBuffer commandBuffer, ref VkSampleLocationsInfo sampleLocationsInfo) => vkCmdSetSampleLocationsEXT(commandBuffer, ref sampleLocationsInfo);
        [DllImport("vulkan-1")] private static extern void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfo[] sampleLocationsInfo);
        public static void CmdSetSampleLocations(VkCommandBuffer commandBuffer, VkSampleLocationsInfo[] sampleLocationsInfo) => vkCmdSetSampleLocationsEXT(commandBuffer, sampleLocationsInfo);
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDebugReportCallback callback);
        public static void CreateDebugReportCallback(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDebugReportCallback callback) => vkCreateDebugReportCallbackEXT(instance, ref createInfo, ref allocator, ref callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDebugReportCallback callback);
        public static void CreateDebugReportCallback(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDebugReportCallback callback) => vkCreateDebugReportCallbackEXT(instance, createInfo, ref allocator, ref callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDebugReportCallback callback);
        public static void CreateDebugReportCallback(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDebugReportCallback callback) => vkCreateDebugReportCallbackEXT(instance, ref createInfo, allocator, ref callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDebugReportCallback callback);
        public static void CreateDebugReportCallback(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDebugReportCallback callback) => vkCreateDebugReportCallbackEXT(instance, createInfo, allocator, ref callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDebugReportCallback[] callback);
        public static void CreateDebugReportCallback(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDebugReportCallback[] callback) => vkCreateDebugReportCallbackEXT(instance, ref createInfo, ref allocator, callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDebugReportCallback[] callback);
        public static void CreateDebugReportCallback(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDebugReportCallback[] callback) => vkCreateDebugReportCallbackEXT(instance, createInfo, ref allocator, callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDebugReportCallback[] callback);
        public static void CreateDebugReportCallback(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDebugReportCallback[] callback) => vkCreateDebugReportCallbackEXT(instance, ref createInfo, allocator, callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDebugReportCallback[] callback);
        public static void CreateDebugReportCallback(VkInstance instance, VkDebugReportCallbackCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDebugReportCallback[] callback) => vkCreateDebugReportCallbackEXT(instance, createInfo, allocator, callback).AssertSuccess(nameof(vkCreateDebugReportCallbackEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDebugUtilsMessenger messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkDebugUtilsMessenger messenger) => vkCreateDebugUtilsMessengerEXT(instance, ref createInfo, ref allocator, ref messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDebugUtilsMessenger messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkDebugUtilsMessenger messenger) => vkCreateDebugUtilsMessengerEXT(instance, createInfo, ref allocator, ref messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDebugUtilsMessenger messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkDebugUtilsMessenger messenger) => vkCreateDebugUtilsMessengerEXT(instance, ref createInfo, allocator, ref messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDebugUtilsMessenger messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkDebugUtilsMessenger messenger) => vkCreateDebugUtilsMessengerEXT(instance, createInfo, allocator, ref messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDebugUtilsMessenger[] messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkDebugUtilsMessenger[] messenger) => vkCreateDebugUtilsMessengerEXT(instance, ref createInfo, ref allocator, messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDebugUtilsMessenger[] messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkDebugUtilsMessenger[] messenger) => vkCreateDebugUtilsMessengerEXT(instance, createInfo, ref allocator, messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDebugUtilsMessenger[] messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, ref VkDebugUtilsMessengerCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkDebugUtilsMessenger[] messenger) => vkCreateDebugUtilsMessengerEXT(instance, ref createInfo, allocator, messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDebugUtilsMessenger[] messenger);
        public static void CreateDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessengerCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkDebugUtilsMessenger[] messenger) => vkCreateDebugUtilsMessengerEXT(instance, createInfo, allocator, messenger).AssertSuccess(nameof(vkCreateDebugUtilsMessengerEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateHeadlessSurface(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateHeadlessSurfaceEXT(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateHeadlessSurface(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateHeadlessSurfaceEXT(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateHeadlessSurface(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateHeadlessSurfaceEXT(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateHeadlessSurface(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateHeadlessSurfaceEXT(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateHeadlessSurface(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateHeadlessSurfaceEXT(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateHeadlessSurface(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateHeadlessSurfaceEXT(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateHeadlessSurface(VkInstance instance, ref VkHeadlessSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateHeadlessSurfaceEXT(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateHeadlessSurface(VkInstance instance, VkHeadlessSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateHeadlessSurfaceEXT(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateHeadlessSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateMetalSurface(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateMetalSurfaceEXT(instance, ref createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface);
        public static void CreateMetalSurface(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkSurface surface) => vkCreateMetalSurfaceEXT(instance, createInfo, ref allocator, ref surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateMetalSurface(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateMetalSurfaceEXT(instance, ref createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface);
        public static void CreateMetalSurface(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkSurface surface) => vkCreateMetalSurfaceEXT(instance, createInfo, allocator, ref surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateMetalSurface(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateMetalSurfaceEXT(instance, ref createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface);
        public static void CreateMetalSurface(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkSurface[] surface) => vkCreateMetalSurfaceEXT(instance, createInfo, ref allocator, surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateMetalSurface(VkInstance instance, ref VkMetalSurfaceCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateMetalSurfaceEXT(instance, ref createInfo, allocator, surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface);
        public static void CreateMetalSurface(VkInstance instance, VkMetalSurfaceCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkSurface[] surface) => vkCreateMetalSurfaceEXT(instance, createInfo, allocator, surface).AssertSuccess(nameof(vkCreateMetalSurfaceEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkValidationCache validationCache);
        public static void CreateValidationCache(VkDevice device, ref VkValidationCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, ref VkValidationCache validationCache) => vkCreateValidationCacheEXT(device, ref createInfo, ref allocator, ref validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkValidationCache validationCache);
        public static void CreateValidationCache(VkDevice device, VkValidationCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, ref VkValidationCache validationCache) => vkCreateValidationCacheEXT(device, createInfo, ref allocator, ref validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkValidationCache validationCache);
        public static void CreateValidationCache(VkDevice device, ref VkValidationCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, ref VkValidationCache validationCache) => vkCreateValidationCacheEXT(device, ref createInfo, allocator, ref validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkValidationCache validationCache);
        public static void CreateValidationCache(VkDevice device, VkValidationCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, ref VkValidationCache validationCache) => vkCreateValidationCacheEXT(device, createInfo, allocator, ref validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkValidationCache[] validationCache);
        public static void CreateValidationCache(VkDevice device, ref VkValidationCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, VkValidationCache[] validationCache) => vkCreateValidationCacheEXT(device, ref createInfo, ref allocator, validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkValidationCache[] validationCache);
        public static void CreateValidationCache(VkDevice device, VkValidationCacheCreateInfo[] createInfo, ref VkAllocationCallbacks allocator, VkValidationCache[] validationCache) => vkCreateValidationCacheEXT(device, createInfo, ref allocator, validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkValidationCache[] validationCache);
        public static void CreateValidationCache(VkDevice device, ref VkValidationCacheCreateInfo createInfo, VkAllocationCallbacks[] allocator, VkValidationCache[] validationCache) => vkCreateValidationCacheEXT(device, ref createInfo, allocator, validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkValidationCache[] validationCache);
        public static void CreateValidationCache(VkDevice device, VkValidationCacheCreateInfo[] createInfo, VkAllocationCallbacks[] allocator, VkValidationCache[] validationCache) => vkCreateValidationCacheEXT(device, createInfo, allocator, validationCache).AssertSuccess(nameof(vkCreateValidationCacheEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, ref VkDebugMarkerObjectNameInfo nameInfo);
        public static void DebugMarkerSetObjectName(VkDevice device, ref VkDebugMarkerObjectNameInfo nameInfo) => vkDebugMarkerSetObjectNameEXT(device, ref nameInfo).AssertSuccess(nameof(vkDebugMarkerSetObjectNameEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfo[] nameInfo);
        public static void DebugMarkerSetObjectName(VkDevice device, VkDebugMarkerObjectNameInfo[] nameInfo) => vkDebugMarkerSetObjectNameEXT(device, nameInfo).AssertSuccess(nameof(vkDebugMarkerSetObjectNameEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, ref VkDebugMarkerObjectTagInfo tagInfo);
        public static void DebugMarkerSetObjectTag(VkDevice device, ref VkDebugMarkerObjectTagInfo tagInfo) => vkDebugMarkerSetObjectTagEXT(device, ref tagInfo).AssertSuccess(nameof(vkDebugMarkerSetObjectTagEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfo[] tagInfo);
        public static void DebugMarkerSetObjectTag(VkDevice device, VkDebugMarkerObjectTagInfo[] tagInfo) => vkDebugMarkerSetObjectTagEXT(device, tagInfo).AssertSuccess(nameof(vkDebugMarkerSetObjectTagEXT));
        [DllImport("vulkan-1")] private static extern void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallback callback, ref VkAllocationCallbacks allocator);
        public static void DestroyDebugReportCallback(VkInstance instance, VkDebugReportCallback callback, ref VkAllocationCallbacks allocator) => vkDestroyDebugReportCallbackEXT(instance, callback, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallback callback, VkAllocationCallbacks[] allocator);
        public static void DestroyDebugReportCallback(VkInstance instance, VkDebugReportCallback callback, VkAllocationCallbacks[] allocator) => vkDestroyDebugReportCallbackEXT(instance, callback, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessenger messenger, ref VkAllocationCallbacks allocator);
        public static void DestroyDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessenger messenger, ref VkAllocationCallbacks allocator) => vkDestroyDebugUtilsMessengerEXT(instance, messenger, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessenger messenger, VkAllocationCallbacks[] allocator);
        public static void DestroyDebugUtilsMessenger(VkInstance instance, VkDebugUtilsMessenger messenger, VkAllocationCallbacks[] allocator) => vkDestroyDebugUtilsMessengerEXT(instance, messenger, allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCache validationCache, ref VkAllocationCallbacks allocator);
        public static void DestroyValidationCache(VkDevice device, VkValidationCache validationCache, ref VkAllocationCallbacks allocator) => vkDestroyValidationCacheEXT(device, validationCache, ref allocator);
        [DllImport("vulkan-1")] private static extern void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCache validationCache, VkAllocationCallbacks[] allocator);
        public static void DestroyValidationCache(VkDevice device, VkValidationCache validationCache, VkAllocationCallbacks[] allocator) => vkDestroyValidationCacheEXT(device, validationCache, allocator);
        [DllImport("vulkan-1")] private static extern VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplay display, ref VkDisplayPowerInfo displayPowerInfo);
        public static void DisplayPowerControl(VkDevice device, VkDisplay display, ref VkDisplayPowerInfo displayPowerInfo) => vkDisplayPowerControlEXT(device, display, ref displayPowerInfo).AssertSuccess(nameof(vkDisplayPowerControlEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplay display, VkDisplayPowerInfo[] displayPowerInfo);
        public static void DisplayPowerControl(VkDevice device, VkDisplay display, VkDisplayPowerInfo[] displayPowerInfo) => vkDisplayPowerControlEXT(device, display, displayPowerInfo).AssertSuccess(nameof(vkDisplayPowerControlEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ref ulong timestamps, ref ulong maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ref ulong timestamps, ref ulong maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, ref timestampInfos, ref timestamps, ref maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ref ulong timestamps, ref ulong maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ref ulong timestamps, ref ulong maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, timestampInfos, ref timestamps, ref maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ulong[] timestamps, ref ulong maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ulong[] timestamps, ref ulong maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, ref timestampInfos, timestamps, ref maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ulong[] timestamps, ref ulong maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ulong[] timestamps, ref ulong maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, timestampInfos, timestamps, ref maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ref ulong timestamps, ulong[] maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ref ulong timestamps, ulong[] maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, ref timestampInfos, ref timestamps, maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ref ulong timestamps, ulong[] maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ref ulong timestamps, ulong[] maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, timestampInfos, ref timestamps, maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ulong[] timestamps, ulong[] maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, ref VkCalibratedTimestampInfo timestampInfos, ulong[] timestamps, ulong[] maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, ref timestampInfos, timestamps, maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ulong[] timestamps, ulong[] maxDeviation);
        public static void GetCalibratedTimestamps(VkDevice device, uint timestampCount, VkCalibratedTimestampInfo[] timestampInfos, ulong[] timestamps, ulong[] maxDeviation) => vkGetCalibratedTimestampsEXT(device, timestampCount, timestampInfos, timestamps, maxDeviation).AssertSuccess(nameof(vkGetCalibratedTimestampsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref VkDeviceGroupPresentModeFlags modes);
        public static void GetDeviceGroupSurfacePresentModes2(VkDevice device, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref VkDeviceGroupPresentModeFlags modes) => vkGetDeviceGroupSurfacePresentModes2EXT(device, ref surfaceInfo, ref modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref VkDeviceGroupPresentModeFlags modes);
        public static void GetDeviceGroupSurfacePresentModes2(VkDevice device, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref VkDeviceGroupPresentModeFlags modes) => vkGetDeviceGroupSurfacePresentModes2EXT(device, surfaceInfo, ref modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, VkDeviceGroupPresentModeFlags[] modes);
        public static void GetDeviceGroupSurfacePresentModes2(VkDevice device, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, VkDeviceGroupPresentModeFlags[] modes) => vkGetDeviceGroupSurfacePresentModes2EXT(device, ref surfaceInfo, modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, VkDeviceGroupPresentModeFlags[] modes);
        public static void GetDeviceGroupSurfacePresentModes2(VkDevice device, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, VkDeviceGroupPresentModeFlags[] modes) => vkGetDeviceGroupSurfacePresentModes2EXT(device, surfaceInfo, modes).AssertSuccess(nameof(vkGetDeviceGroupSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, ref VkImageDrmFormatModifierProperties properties);
        public static void GetImageDrmFormatModifierProperties(VkDevice device, VkImage image, ref VkImageDrmFormatModifierProperties properties) => vkGetImageDrmFormatModifierPropertiesEXT(device, image, ref properties).AssertSuccess(nameof(vkGetImageDrmFormatModifierPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierProperties[] properties);
        public static void GetImageDrmFormatModifierProperties(VkDevice device, VkImage image, VkImageDrmFormatModifierProperties[] properties) => vkGetImageDrmFormatModifierPropertiesEXT(device, image, properties).AssertSuccess(nameof(vkGetImageDrmFormatModifierPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, ref VkMemoryHostPointerProperties memoryHostPointerProperties);
        public static void GetMemoryHostPointerProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, ref VkMemoryHostPointerProperties memoryHostPointerProperties) => vkGetMemoryHostPointerPropertiesEXT(device, handleType, hostPointer, ref memoryHostPointerProperties).AssertSuccess(nameof(vkGetMemoryHostPointerPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, VkMemoryHostPointerProperties[] memoryHostPointerProperties);
        public static void GetMemoryHostPointerProperties(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, VkMemoryHostPointerProperties[] memoryHostPointerProperties) => vkGetMemoryHostPointerPropertiesEXT(device, handleType, hostPointer, memoryHostPointerProperties).AssertSuccess(nameof(vkGetMemoryHostPointerPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, ref uint timeDomainCount, ref VkTimeDomain timeDomains);
        public static void GetPhysicalDeviceCalibrateableTimeDomains(VkPhysicalDevice physicalDevice, ref uint timeDomainCount, ref VkTimeDomain timeDomains) => vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, ref timeDomainCount, ref timeDomains).AssertSuccess(nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint[] timeDomainCount, ref VkTimeDomain timeDomains);
        public static void GetPhysicalDeviceCalibrateableTimeDomains(VkPhysicalDevice physicalDevice, uint[] timeDomainCount, ref VkTimeDomain timeDomains) => vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, timeDomainCount, ref timeDomains).AssertSuccess(nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, ref uint timeDomainCount, VkTimeDomain[] timeDomains);
        public static void GetPhysicalDeviceCalibrateableTimeDomains(VkPhysicalDevice physicalDevice, ref uint timeDomainCount, VkTimeDomain[] timeDomains) => vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, ref timeDomainCount, timeDomains).AssertSuccess(nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint[] timeDomainCount, VkTimeDomain[] timeDomains);
        public static void GetPhysicalDeviceCalibrateableTimeDomains(VkPhysicalDevice physicalDevice, uint[] timeDomainCount, VkTimeDomain[] timeDomains) => vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, timeDomainCount, timeDomains).AssertSuccess(nameof(vkGetPhysicalDeviceCalibrateableTimeDomainsEXT));
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, ref VkMultisampleProperties multisampleProperties);
        public static void GetPhysicalDeviceMultisampleProperties(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, ref VkMultisampleProperties multisampleProperties) => vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, ref multisampleProperties);
        [DllImport("vulkan-1")] private static extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, VkMultisampleProperties[] multisampleProperties);
        public static void GetPhysicalDeviceMultisampleProperties(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, VkMultisampleProperties[] multisampleProperties) => vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, multisampleProperties);
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, ref surfaceInfo, ref presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, surfaceInfo, ref presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, ref surfaceInfo, presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] presentModeCount, ref VkPresentMode presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] presentModeCount, ref VkPresentMode presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, surfaceInfo, presentModeCount, ref presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, ref uint presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, ref surfaceInfo, ref presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, ref uint presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, surfaceInfo, ref presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, uint[] presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, ref surfaceInfo, presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] presentModeCount, VkPresentMode[] presentModes);
        public static void GetPhysicalDeviceSurfacePresentModes2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2[] surfaceInfo, uint[] presentModeCount, VkPresentMode[] presentModes) => vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, surfaceInfo, presentModeCount, presentModes).AssertSuccess(nameof(vkGetPhysicalDeviceSurfacePresentModes2EXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, ref uint toolCount, ref VkPhysicalDeviceToolProperties toolProperties);
        public static void GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, ref uint toolCount, ref VkPhysicalDeviceToolProperties toolProperties) => vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, ref toolCount, ref toolProperties).AssertSuccess(nameof(vkGetPhysicalDeviceToolPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint[] toolCount, ref VkPhysicalDeviceToolProperties toolProperties);
        public static void GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint[] toolCount, ref VkPhysicalDeviceToolProperties toolProperties) => vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, toolCount, ref toolProperties).AssertSuccess(nameof(vkGetPhysicalDeviceToolPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, ref uint toolCount, VkPhysicalDeviceToolProperties[] toolProperties);
        public static void GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, ref uint toolCount, VkPhysicalDeviceToolProperties[] toolProperties) => vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, ref toolCount, toolProperties).AssertSuccess(nameof(vkGetPhysicalDeviceToolPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint[] toolCount, VkPhysicalDeviceToolProperties[] toolProperties);
        public static void GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint[] toolCount, VkPhysicalDeviceToolProperties[] toolProperties) => vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, toolCount, toolProperties).AssertSuccess(nameof(vkGetPhysicalDeviceToolPropertiesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchain swapchain, VkSurfaceCounterFlags counter, ref ulong counterValue);
        public static void GetSwapchainCounter(VkDevice device, VkSwapchain swapchain, VkSurfaceCounterFlags counter, ref ulong counterValue) => vkGetSwapchainCounterEXT(device, swapchain, counter, ref counterValue).AssertSuccess(nameof(vkGetSwapchainCounterEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchain swapchain, VkSurfaceCounterFlags counter, ulong[] counterValue);
        public static void GetSwapchainCounter(VkDevice device, VkSwapchain swapchain, VkSurfaceCounterFlags counter, ulong[] counterValue) => vkGetSwapchainCounterEXT(device, swapchain, counter, counterValue).AssertSuccess(nameof(vkGetSwapchainCounterEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCache validationCache, ref nuint dataSize, void* data);
        public static void GetValidationCacheData(VkDevice device, VkValidationCache validationCache, ref nuint dataSize, void* data) => vkGetValidationCacheDataEXT(device, validationCache, ref dataSize, data).AssertSuccess(nameof(vkGetValidationCacheDataEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCache validationCache, nuint[] dataSize, void* data);
        public static void GetValidationCacheData(VkDevice device, VkValidationCache validationCache, nuint[] dataSize, void* data) => vkGetValidationCacheDataEXT(device, validationCache, dataSize, data).AssertSuccess(nameof(vkGetValidationCacheDataEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCache dstCache, uint srcCacheCount, ref VkValidationCache srcCaches);
        public static void MergeValidationCaches(VkDevice device, VkValidationCache dstCache, uint srcCacheCount, ref VkValidationCache srcCaches) => vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, ref srcCaches).AssertSuccess(nameof(vkMergeValidationCachesEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCache dstCache, uint srcCacheCount, VkValidationCache[] srcCaches);
        public static void MergeValidationCaches(VkDevice device, VkValidationCache dstCache, uint srcCacheCount, VkValidationCache[] srcCaches) => vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, srcCaches).AssertSuccess(nameof(vkMergeValidationCachesEXT));
        [DllImport("vulkan-1")] private static extern void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, ref VkDebugUtilsLabel labelInfo);
        public static void QueueBeginDebugUtilsLabel(VkQueue queue, ref VkDebugUtilsLabel labelInfo) => vkQueueBeginDebugUtilsLabelEXT(queue, ref labelInfo);
        [DllImport("vulkan-1")] private static extern void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabel[] labelInfo);
        public static void QueueBeginDebugUtilsLabel(VkQueue queue, VkDebugUtilsLabel[] labelInfo) => vkQueueBeginDebugUtilsLabelEXT(queue, labelInfo);
        [DllImport("vulkan-1")] private static extern void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, ref VkDebugUtilsLabel labelInfo);
        public static void QueueInsertDebugUtilsLabel(VkQueue queue, ref VkDebugUtilsLabel labelInfo) => vkQueueInsertDebugUtilsLabelEXT(queue, ref labelInfo);
        [DllImport("vulkan-1")] private static extern void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabel[] labelInfo);
        public static void QueueInsertDebugUtilsLabel(VkQueue queue, VkDebugUtilsLabel[] labelInfo) => vkQueueInsertDebugUtilsLabelEXT(queue, labelInfo);
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void RegisterDeviceEvent(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkRegisterDeviceEventEXT(device, ref deviceEventInfo, ref allocator, ref fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void RegisterDeviceEvent(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkRegisterDeviceEventEXT(device, deviceEventInfo, ref allocator, ref fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void RegisterDeviceEvent(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkRegisterDeviceEventEXT(device, ref deviceEventInfo, allocator, ref fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void RegisterDeviceEvent(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkRegisterDeviceEventEXT(device, deviceEventInfo, allocator, ref fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void RegisterDeviceEvent(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkRegisterDeviceEventEXT(device, ref deviceEventInfo, ref allocator, fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void RegisterDeviceEvent(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkRegisterDeviceEventEXT(device, deviceEventInfo, ref allocator, fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void RegisterDeviceEvent(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkRegisterDeviceEventEXT(device, ref deviceEventInfo, allocator, fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void RegisterDeviceEvent(VkDevice device, VkDeviceEventInfo[] deviceEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkRegisterDeviceEventEXT(device, deviceEventInfo, allocator, fence).AssertSuccess(nameof(vkRegisterDeviceEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkRegisterDisplayEventEXT(device, display, ref displayEventInfo, ref allocator, ref fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => vkRegisterDisplayEventEXT(device, display, displayEventInfo, ref allocator, ref fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkRegisterDisplayEventEXT(device, display, ref displayEventInfo, allocator, ref fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, VkAllocationCallbacks[] allocator, ref VkFence fence) => vkRegisterDisplayEventEXT(device, display, displayEventInfo, allocator, ref fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkRegisterDisplayEventEXT(device, display, ref displayEventInfo, ref allocator, fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, ref VkAllocationCallbacks allocator, VkFence[] fence) => vkRegisterDisplayEventEXT(device, display, displayEventInfo, ref allocator, fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkRegisterDisplayEventEXT(device, display, ref displayEventInfo, allocator, fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence);
        public static void RegisterDisplayEvent(VkDevice device, VkDisplay display, VkDisplayEventInfo[] displayEventInfo, VkAllocationCallbacks[] allocator, VkFence[] fence) => vkRegisterDisplayEventEXT(device, display, displayEventInfo, allocator, fence).AssertSuccess(nameof(vkRegisterDisplayEventEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, ref VkDebugUtilsObjectNameInfo nameInfo);
        public static void SetDebugUtilsObjectName(VkDevice device, ref VkDebugUtilsObjectNameInfo nameInfo) => vkSetDebugUtilsObjectNameEXT(device, ref nameInfo).AssertSuccess(nameof(vkSetDebugUtilsObjectNameEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfo[] nameInfo);
        public static void SetDebugUtilsObjectName(VkDevice device, VkDebugUtilsObjectNameInfo[] nameInfo) => vkSetDebugUtilsObjectNameEXT(device, nameInfo).AssertSuccess(nameof(vkSetDebugUtilsObjectNameEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, ref VkDebugUtilsObjectTagInfo tagInfo);
        public static void SetDebugUtilsObjectTag(VkDevice device, ref VkDebugUtilsObjectTagInfo tagInfo) => vkSetDebugUtilsObjectTagEXT(device, ref tagInfo).AssertSuccess(nameof(vkSetDebugUtilsObjectTagEXT));
        [DllImport("vulkan-1")] private static extern VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfo[] tagInfo);
        public static void SetDebugUtilsObjectTag(VkDevice device, VkDebugUtilsObjectTagInfo[] tagInfo) => vkSetDebugUtilsObjectTagEXT(device, tagInfo).AssertSuccess(nameof(vkSetDebugUtilsObjectTagEXT));
        [DllImport("vulkan-1")] private static extern void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, ref VkSwapchain swapchains, ref VkHdrMetadata metadata);
        public static void SetHdrMetadata(VkDevice device, uint swapchainCount, ref VkSwapchain swapchains, ref VkHdrMetadata metadata) => vkSetHdrMetadataEXT(device, swapchainCount, ref swapchains, ref metadata);
        [DllImport("vulkan-1")] private static extern void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchain[] swapchains, ref VkHdrMetadata metadata);
        public static void SetHdrMetadata(VkDevice device, uint swapchainCount, VkSwapchain[] swapchains, ref VkHdrMetadata metadata) => vkSetHdrMetadataEXT(device, swapchainCount, swapchains, ref metadata);
        [DllImport("vulkan-1")] private static extern void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, ref VkSwapchain swapchains, VkHdrMetadata[] metadata);
        public static void SetHdrMetadata(VkDevice device, uint swapchainCount, ref VkSwapchain swapchains, VkHdrMetadata[] metadata) => vkSetHdrMetadataEXT(device, swapchainCount, ref swapchains, metadata);
        [DllImport("vulkan-1")] private static extern void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchain[] swapchains, VkHdrMetadata[] metadata);
        public static void SetHdrMetadata(VkDevice device, uint swapchainCount, VkSwapchain[] swapchains, VkHdrMetadata[] metadata) => vkSetHdrMetadataEXT(device, swapchainCount, swapchains, metadata);
        [DllImport("vulkan-1")] private static extern void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlags messageSeverity, VkDebugUtilsMessageTypeFlags messageTypes, ref VkDebugUtilsMessengerCallbackData callbackData);
        public static void SubmitDebugUtilsMessage(VkInstance instance, VkDebugUtilsMessageSeverityFlags messageSeverity, VkDebugUtilsMessageTypeFlags messageTypes, ref VkDebugUtilsMessengerCallbackData callbackData) => vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, ref callbackData);
        [DllImport("vulkan-1")] private static extern void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlags messageSeverity, VkDebugUtilsMessageTypeFlags messageTypes, VkDebugUtilsMessengerCallbackData[] callbackData);
        public static void SubmitDebugUtilsMessage(VkInstance instance, VkDebugUtilsMessageSeverityFlags messageSeverity, VkDebugUtilsMessageTypeFlags messageTypes, VkDebugUtilsMessengerCallbackData[] callbackData) => vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, callbackData);
    }
}